```@meta
CurrentModule = CounterfactualExplanations 
```

```{julia}
include("$(pwd())/docs/setup_docs.jl")
eval(setup_docs)

# Packages
using CounterfactualExplanations
using CounterfactualExplanations.Evaluation
using CounterfactualExplanations.Convergence
using CounterfactualExplanations.Models
using Flux
using JointEnergyModels
using MLJFlux
using TaijaBase.Samplers: PCD, SGLD, ImproperSGLD
using TaijaData
```

# Faithfulness

## Synthetic Data

### Simple Linear Model

```{julia}
nobs = 1000
X, y = TaijaData.load_linearly_separable(nobs)
data = CounterfactualData(X, y)
M = Models.fit_model(data,:Linear)
```

```{julia}
# Select a factual instance:
target = 2
factual = 1
chosen = rand(findall(predict_label(M, data) .== factual))
x = select_factual(data, chosen)

# Search parameters:
opt = Adam(0.1)
conv = MaxIterConvergence()

# Generic Generator:
generator = GenericGenerator(opt=opt)
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p1 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="Generic Generator ($(round(faith, digits=5)))")

# Search:
generator = ECCoGenerator(opt=opt; λ=[0.0, 1.0])
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p2 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="ECCo Generator ($(round(faith, digits=5)))")

plot(p1, p2; size=(1000, 400))
```

### Joint Energy Model

```{julia}
nobs = 1000
X, y = TaijaData.load_blobs(nobs; cluster_std=0.1, center_box=(-1. => 1.))
data = CounterfactualData(X, y)
n_hidden = 16
_batch_size = Int(round(nobs/10))
epochs = 100
M = Models.fit_model(
    data,:JEM;
    builder=MLJFlux.MLP(
        hidden=(n_hidden, n_hidden, n_hidden), 
        σ=Flux.swish
    ),
    batch_size=_batch_size,
    finaliser=Flux.softmax,
    loss=Flux.Losses.crossentropy,
    jem_training_params=(
        α=[1.0,1.0,1e-1],
        verbosity=10,
    ),
    epochs=epochs,
    sampling_steps=30,
)
```

```{julia}
# Select a factual instance:
target = 2
factual = 1
chosen = rand(findall(predict_label(M, data) .== factual))
x = select_factual(data, chosen)

# Search parameters:
opt = Adam(0.1)
conv = MaxIterConvergence()

# Generic Generator:
generator = GenericGenerator(opt=opt)
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p1 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="Generic Generator ($(round(faith, digits=5)))")

# Search:
generator = ECCoGenerator(opt=opt; λ=[0.0, 1.0])
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p2 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="ECCo Generator ($(round(faith, digits=5)))")

plot(p1, p2; size=(1000, 400))
```

### More Complex Data

```{julia}
nobs = 1000
X, y = TaijaData.load_circles(nobs)
data = CounterfactualData(X, y)
n_hidden = 32
_batch_size = Int(round(nobs/10))
epochs = 100
M = Models.fit_model(data,:JEM)
```

```{julia}
# Select a factual instance:
target = 1
factual = 0
chosen = rand(findall(predict_label(M, data) .== factual))
x = select_factual(data, chosen)

# Search parameters:
opt = Adam(0.1)
conv = MaxIterConvergence()

# Generic Generator:
generator = GenericGenerator(opt=opt)
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p1 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="Generic Generator ($(round(faith, digits=5)))")

# Search:
generator = ECCoGenerator(opt=opt; λ=[0.0, 1.0])
ce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)
faith = Evaluation.faithfulness(ce)
p2 = plot(ce; zoom=-1)
X̂ = ce.search[:energy_sampler][ce.target].posterior
scatter!(X̂[1, :], X̂[2, :]; label="X|y=$target", shape=:star5, ms=10, title="ECCo Generator ($(round(faith, digits=5)))")

plot(p1, p2; size=(1000, 400))
```
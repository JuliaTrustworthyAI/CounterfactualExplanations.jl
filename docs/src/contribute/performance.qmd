```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```


```{julia}
# Counteractual data and model:
counterfactual_data = load_linearly_separable()
counterfactual_data.standardize = false
M = fit_model(counterfactual_data, :Linear)
target = 2
factual = 1
chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
x = select_factual(counterfactual_data, chosen)

# Search:
generator = GenericGenerator()
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```


```{julia}
counterfactual_data_large = load_linearly_separable(100000)
counterfactual_data_large.standardize = false
```


```{julia}
@time ce = generate_counterfactual(x, target, counterfactual_data, M, generator; initialization=:identity)
```


```{julia}
@time ce_large = generate_counterfactual(x, target, counterfactual_data_large, M, generator; initialization=:identity)
```


```{julia}
@time CounterfactualExplanation(x, target, counterfactual_data, M, generator)
```

```{julia}
using CounterfactualExplanations.DataPreprocessing: undersample
dt_reduced = undersample(counterfactual_data_large, 10)
@time ce_reduced = generate_counterfactual(x, target, dt_reduced, M, generator; initialization=:identity)
```
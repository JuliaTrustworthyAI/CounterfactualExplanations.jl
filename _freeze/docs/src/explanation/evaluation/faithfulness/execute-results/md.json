{
  "hash": "13d43f4d99989137a509fec207c639da",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ninclude(\"$(pwd())/docs/setup_docs.jl\")\neval(setup_docs)\n\n# Packages\nusing CounterfactualExplanations\nusing CounterfactualExplanations.Evaluation\nusing CounterfactualExplanations.Convergence\nusing CounterfactualExplanations.Models\nusing Flux\nusing JointEnergyModels\nusing MLJFlux\nusing TaijaBase.Samplers: PMC, SGLD, ImproperSGLD\nusing TaijaData\n```\n:::\n\n\n# Faithfulness\n\n## Synthetic Data\n\n- [ ] Joint Energy Model\n\n### Joint Energy Model\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nn_obs = 1000\nX, y = TaijaData.load_blobs(n_obs; cluster_std=0.1, center_box=(-1. => 1.))\ndata = CounterfactualData(X, y)\n\nn_hidden = 16\n_batch_size = Int(round(n_obs/10))\nepochs = 100\nM = Models.fit_model(\n    data,:JEM;\n    builder=MLJFlux.MLP(\n        hidden=(n_hidden, n_hidden, n_hidden), \n        σ=Flux.swish\n    ),\n    batch_size=_batch_size,\n    finaliser=Flux.softmax,\n    loss=Flux.Losses.crossentropy,\n    jem_training_params=(\n        α=[1.0,1.0,1e-1],\n        verbosity=10,\n    ),\n    epochs=epochs,\n    sampling_steps=30,\n)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n# Select a factual instance:\ntarget = 2\nfactual = 1\nchosen = rand(findall(predict_label(M, data) .== factual))\nx = select_factual(data, chosen)\n\n# Search parameters:\nopt = Adam(0.01)\nconv = GeneratorConditionsConvergence()\n\n# Generic Generator:\nλ₁ = 0.1\ngenerator = GenericGenerator(opt=opt, λ=λ₁)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, num_counterfactuals=5)\nfaith = Evaluation.faithfulness(ce)\np1 = plot(ce; zoom=-1)\nX̂ = ce.search[:energy_sampler][ce.target].posterior\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"Generic Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n\n# Search:\nλ₂ = 0.5\ngenerator = ECCoGenerator(opt=opt; λ=[λ₁, λ₂])\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, num_counterfactuals=5)\nfaith = Evaluation.faithfulness(ce)\np2 = plot(ce; zoom=-1)\nX̂ = ce.search[:energy_sampler][ce.target].posterior\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"ECCo Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n\nplot(p1, p2; size=(1000, 400))\n```\n:::\n\n\n### Deep Ensemble\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nn_obs = 1000\nX, y = TaijaData.load_blobs(n_obs; cluster_std=0.1, center_box=(-1. => 1.))\ndata = CounterfactualData(X, y)\nflux_training_params.n_epochs = 1\nM = Models.fit_model(data,:DeepEnsemble)\nCounterfactualExplanations.reset!(flux_training_params)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# Select a factual instance:\ntarget = 2\nfactual = 1\nchosen = rand(findall(predict_label(M, data) .== factual))\nx = select_factual(data, chosen)\n\n# Search parameters:\nopt = Adam(0.1)\nconv = GeneratorConditionsConvergence()\n\n# Generic Generator:\ngenerator = GenericGenerator(opt=opt)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)\nfaith = Evaluation.faithfulness(ce)\nX̂ = ce.search[:energy_sampler][ce.target].posterior\np1 = plot(ce, zoom=-1)\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"Generic Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n_lim = maximum(abs.(X̂))\nxlims, ylims = (-_lim, _lim), (-_lim, _lim)\np3 = plot(ce; xlims=xlims, ylims=ylims)\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"Generic Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n\n# Search:\ngenerator = ECCoGenerator(opt=opt)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)\nfaith = Evaluation.faithfulness(ce)\nX̂ = ce.search[:energy_sampler][ce.target].posterior\np2 = plot(ce, zoom=-1)\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"ECCo Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n_lim = maximum(abs.(X̂))\nxlims, ylims = (-_lim, _lim), (-_lim, _lim)\np4 = plot(ce; xlims=xlims, ylims=ylims)\nscatter!(X̂[1, :], X̂[2, :]; label=\"X|y=$target\", shape=:star5, ms=10, title=\"ECCo Generator ($(round(faith, digits=5)))\", color=3, alpha=0.1)\nscatter!(ce.x′[1,:], ce.x′[2,:]; label=\"Counterfactual\", shape=:star1, ms=20, color=4)\n\nplot(p1, p2, p3, p4; size=(1000, 800))\n```\n:::\n\n\n## MNIST\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n_nrow = 3\nRandom.seed!(42)\nX, y = TaijaData.load_mnist()\ndata = CounterfactualData(X, y)\n\nusing CounterfactualExplanations.Models: load_mnist_model\nusing CounterfactualExplanations: JEM\nM = load_mnist_model(JEM())\n# M = load_mnist_model(MLP())\n\n# Select a factual instance:\ntarget = 3\nfactual = 8\nchosen = rand(findall(predict_label(M, data) .== factual))\nx = select_factual(data, chosen)\n\n# Search parameters:\nopt = RMSProp(0.01)\nconv = GeneratorConditionsConvergence(decision_threshold = 0.9)\n\n# Factual:\nfactual = convert2image(MNIST, reshape(x, 28, 28))\np1 = plot(factual; title=\"Factual\", axis=([], false))\n\n# Generic Generator:\n@info \"Generic Generator\"\ngenerator = GenericGenerator(opt=opt)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)\nfaith = Evaluation.faithfulness(ce; nsamples=_nrow^2, niter_final=10000)\nprintln(\"Faithfulness: $(round(faith, digits=5))\")\nplaus = Evaluation.plausibility(ce)\nprintln(\"Plausibility: $(round(plaus, digits=5))\")\nimg = convert2image(MNIST, reshape(ce.x′, 28, 28))\np2 = plot(img, title=\"Generic: p(y=$target)=$(round(target_probs(ce)[1], digits=5))\", axis=([], false))\n\n# Search:\n@info \"ECCo Generator\"\ngenerator = ECCoGenerator(opt=opt)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv, initialization=:identity)\nfaith = Evaluation.faithfulness(ce; nsamples=_nrow^2, niter_final=10000)\nprintln(\"Faithfulness: $(round(faith, digits=5))\")\nplaus = Evaluation.plausibility(ce)\nprintln(\"Plausibility: $(round(plaus, digits=5))\")\nimg = convert2image(MNIST, reshape(ce.x′, 28, 28))\np3 = plot(img, title=\"ECCo: p(y=$target)=$(round(target_probs(ce)[1], digits=5))\", axis=([], false))\n\nplt = plot(p1, p2, p3; size=(750, 200), layout=(1, 3))\ndisplay(plt)\n\nX̂ = ce.search[:energy_sampler][ce.target].posterior \nimgs = eachcol(X̂) |>\n    X -> reshape.(X, 28, 28) |>\n    X -> convert2image.(MNIST, X) |>\n    X -> mosaicview(X, nrow=_nrow)\nimgs\n```\n:::\n\n\n",
    "supporting": [
      "faithfulness_files"
    ],
    "filters": []
  }
}
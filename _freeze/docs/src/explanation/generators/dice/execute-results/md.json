{
  "hash": "fcf2c1094b3204e390cb139c70e6426f",
  "result": {
    "engine": "jupyter",
    "markdown": "``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# `DiCEGenerator`\n\nThe `DiCEGenerator` can be used to generate multiple diverse counterfactuals for a single factual.\n\n## Description\n\nCounterfactual Explanations are not unique and there are therefore many different ways through which valid counterfactuals can be generated. In the context of Algorithmic Recourse this can be leveraged to offer individuals not one, but possibly many different ways to change a negative outcome into a positive one. One might argue that it makes sense for those different options to be as diverse as possible. This idea is at the core of **DiCE**, a counterfactual generator introduce by @mothilal2020explaining that generate a diverse set of counterfactual explanations.\n\n### Defining Diversity\n\nTo ensure that the generated counterfactuals are diverse, @mothilal2020explaining add a diversity constraint to the counterfactual search objective. In particular, diversity is explicitly proxied via Determinantal Point Processes (DDP).\n\nWe can implement DDP in Julia as follows:[^1]\n\n[^1]: With thanks to the respondents on [Discourse](https://discourse.julialang.org/t/getting-around-zygote-mutating-array-issue/83907/2.png)\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing LinearAlgebra\nfunction ddp_diversity(X::AbstractArray{<:Real, 3})\n    xs = eachslice(X, dims = ndims(X))\n    K = [1/(1 + norm(x .- y)) for x in xs, y in xs]\n    return det(K)\nend\n```\n:::\n\n\nBelow we generate some random points in $\\mathbb{R}^2$ and apply gradient ascent on this function evaluated at the whole array of points. As we can see in the animation below, the points are sent away from each other. In other words, diversity across the array of points increases as we ascend the `ddp_diversity` function.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nlims = 5\nN = 5\nX = rand(2,1,N)\nT = 50\nη = 0.1\nanim = @animate for t in 1:T\n    X .+= gradient(ddp_diversity, X)[1]\n    Z = reshape(X,2,N)\n    scatter(\n        Z[1,:],Z[2,:],ms=25, \n        xlims=(-lims,lims),ylims=(-lims,lims),\n        label=\"\",colour=1:N,\n        size=(500,500),\n        title=\"Diverse Counterfactuals\"\n    )\nend\ngif(anim, joinpath(www_path, \"dice_intro.gif\"))\n```\n:::\n\n\n![](../../www/dice_intro.gif){#fig-intro}\n\n## Usage\n\nThe approach can be used in our package as follows:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ngenerator = DiCEGenerator()\nconv = CounterfactualExplanations.Convergence.GeneratorConditionsConvergence()\nce = generate_counterfactual(\n    x, target, counterfactual_data, M, generator; \n    num_counterfactuals=5, convergence=conv\n)\nplot(ce)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](dice_files/figure-commonmark/cell-5-output-1.svg){}\n:::\n:::\n\n\n### Effect of Penalty\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nΛ₂ = [0.1, 1.0, 5.0]\nces = []\nn_cf = 5\nusing Flux\nfor λ₂ ∈ Λ₂  \n    λ = [0.00, λ₂]\n    generator = DiCEGenerator(λ=λ)\n    ces = vcat(\n      ces...,\n      generate_counterfactual(\n            x, target, counterfactual_data, M, generator; \n            num_counterfactuals=n_cf, convergence=conv\n      )\n    )\nend\n```\n:::\n\n\nThe figure below shows the resulting counterfactual paths. As expected, the resulting counterfactuals are more dispersed across the feature domain for higher choices of $\\lambda_2$\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](dice_files/figure-commonmark/cell-7-output-1.svg){}\n:::\n:::\n\n\n## References\n\n",
    "supporting": [
      "dice_files"
    ],
    "filters": []
  }
}
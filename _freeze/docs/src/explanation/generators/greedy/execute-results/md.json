{
  "hash": "51a7d27f7ef9bdf263933e1eedaeb2f8",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# `GreedyGenerator`\n\nWe use the term **greedy** to describe the counterfactual generator introduced by @schut2021generating.\n\n## Description\n\nThe Greedy generator works under the premise of generating realistic counterfactuals by minimizing predictive uncertainty. @schut2021generating show that for models that incorporates predictive uncertainty in their predictions, maximizing the predictive probability corresponds to minimizing the predictive uncertainty: by construction, the generated counterfactual will therefore be *realistic* (low epistemic uncertainty) and *unambiguous* (low aleatoric uncertainty). \n\nFor the counterfactual search @schut2021generating propose using a Jacobian-based Saliency Map Attack(JSMA). It is **greedy** in the sense that it is an \"iterative algorithm that updates the most salient feature, i.e. the feature that has the largest influence on the classification, by $\\delta$ at each step\" [@schut2021generating].\n\n## Usage\n\nThe approach can be used in our package as follows:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nM = fit_model(counterfactual_data, :DeepEnsemble)\ngenerator = GreedyGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\nplot(ce)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](greedy_files/figure-commonmark/cell-3-output-1.svg){}\n:::\n:::\n\n\n## References\n\n",
    "supporting": [
      "greedy_files"
    ],
    "filters": []
  }
}
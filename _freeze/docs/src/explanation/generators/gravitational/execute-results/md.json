{
  "hash": "634a5c032ce861c3bf9c62abdccd6d06",
  "result": {
    "engine": "jupyter",
    "markdown": "``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# `GravitationalGenerator`\n\nThe `GravitationalGenerator` was introduced in @altmeyer2023endogenous. It is named so because it generates counterfactuals that gravitate towards some sensible point in the target domain.\n\n## Description\n\n@altmeyer2023endogenous extend the general framework as follows,\n\n``` math\n\\begin{aligned}\n\\mathbf{s}^\\prime &= \\arg \\min_{\\mathbf{s}^\\prime \\in \\mathcal{S}} \\{ {\\text{yloss}(M(f(\\mathbf{s}^\\prime)),y^*)} \\\\ &+ \\lambda_1 {\\text{cost}(f(\\mathbf{s}^\\prime))} + \\lambda_2 {\\text{extcost}(f(\\mathbf{s}^\\prime))} \\}  \n\\end{aligned} \n```\n\nwhere $\\text{cost}(f(\\mathbf{s}^\\prime))$ denotes the proxy for costs faced by the individual. \"The newly introduced term $\\text{extcost}(f(\\mathbf{s}^\\prime))$ is meant to capture and address external costs incurred by the collective of individuals in response to changes in $\\mathbf{s}^\\prime$.\" [@altmeyer2023endogenous]\n\nFor the `GravitationalGenerator` we have,\n\n``` math\n\\begin{aligned}\n\\text{extcost}(f(\\mathbf{s}^\\prime)) = \\text{dist}(f(\\mathbf{s}^\\prime),\\bar{x}^*)  \n\\end{aligned}\n```\n\nwhere $\\bar{x}$ is some sensible point in the target domain, for example, the subsample average $\\bar{x}^*=\\text{mean}(x)$, $x \\in \\mathcal{D}_1$.\n\nThere is a tradeoff then, between the distance of counterfactuals from their factual value and the chosen point in the target domain. The chart below illustrates how the counterfactual outcome changes as the penalty $\\lambda_2$ on the distance to the point in the target domain is increased from left to right (holding the other penalty term constant).\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](gravitational_files/figure-commonmark/cell-3-output-1.svg){}\n:::\n:::\n\n\n## Usage\n\nThe approach can be used in our package as follows:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ngenerator = GravitationalGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\ndisplay(plot(ce))\n```\n\n::: {.cell-output .cell-output-display}\n![](gravitational_files/figure-commonmark/cell-4-output-1.svg){}\n:::\n:::\n\n\n### Comparison to `GenericGenerator`\n\nThe figure below compares the outcome for the `GenericGenerator` and the `GravitationalGenerator`.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](gravitational_files/figure-commonmark/cell-5-output-1.svg){}\n:::\n:::\n\n\n## References\n\n",
    "supporting": [
      "gravitational_files"
    ],
    "filters": []
  }
}
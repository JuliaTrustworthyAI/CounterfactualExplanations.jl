{
  "hash": "f69d7401b43a077291be63348290c381",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n## Package Architecture\n\nThe diagram below provides an overview of the package architecture. It is built around two core modules that are designed to be as extensible as possible through dispatch: 1) `Models` is concerned with making any arbitrary model compatible with the package; 2) `Generators` is used to implement arbitrary counterfactual search algorithms.^[We have made an effort to keep the code base a flexible and extensible as possible, but cannot guarantee at this point that any counterfactual generator can be implemented without further adaptation.] \n\nThe core function of the package, [`generate_counterfactual`](@ref), uses an instance of type [`AbstractFittedModel`](@ref) produced by the `Models` module and an instance of type [`AbstractGenerator`](@ref) produced by the `Generators` module.\n\nMetapackages from the [Taija](https://github.com/JuliaTrustworthyAI) ecosystem provide additional functionality such as datasets, language interoperability, parallelization, and plotting. The `CounterfactualExplanations` package is designed to be used in conjunction with these metapackages, but can also be used as a standalone package.\n\n\n```{mermaid}\n%%| fig-width: 6.5\n%%| echo: false\n\nflowchart TB\n\n    classDef taija fill:#b5c6ff,stroke:#333,color:#fff;\n    classDef module fill:#cb3c33,stroke:#333,color:#fff,stroke-width:4px;\n    classDef struct fill:#389826,stroke:#333,color:#fff;\n    classDef funct fill:#9558b2,stroke:#333,color:#fff;\n\n    %% Taija\n    interop([\"TaijaInteroperability.jl\"])\n    data([\"TaijaData.jl\"])\n    parallel([\"TaijaParallel.jl\"])\n    plotting([\"TaijaPlotting.jl\"])\n\n    %% Modules\n    data_pre([\"DataPreprocessing\"])\n    models([\"Models\"])\n    obj([\"Objectives\"])\n    generators([\"Generators\"])\n    eval([\"Evaluation\"])\n\n    %% Structs\n    c_data[\"CounterfactualData\"]\n    model[\"<:AbstractFittedModel\"]\n    generator[\"<:AbstractGenerator\"]\n    ce[\"CounterfactualExplanation\"]\n\n    %% Functions\n    generate_counterfactual{{\"generate_counterfactual\"}}\n    evaluate{{\"evaluate\"}}\n    plot{{\"plot\"}}\n\n    class interop,data,parallel,plotting taija;\n    class vae,c_data,model,generator,ce struct;\n    class data_pre,models,generators,eval,obj module;\n    class generate_counterfactual,evaluate,plot funct;\n\n    %% Graph\n    data -. data .-> c_data\n    data_pre ===o c_data\n    interop -.-> model\n    models ===o model\n    generators & obj ===o generator\n    c_data & model & generator ===> generate_counterfactual\n    generate_counterfactual ===o ce\n    eval ===> evaluate\n    ce ===o evaluate & plot\n    parallel -.-> generate_counterfactual & evaluate\n    plotting -.-> plot\n```\n\n",
    "supporting": [
      "architecture_files"
    ],
    "filters": []
  }
}
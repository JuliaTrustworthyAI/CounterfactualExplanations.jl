{
  "hash": "ee93a4e1e12fb1617447f2a56e4b9304",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations\n```\n\n![](assets/wide_logo.png)\n\nDocumentation for [CounterfactualExplanations.jl](https://github.com/juliatrustworthyai/CounterfactualExplanations.jl).\n\n# CounterfactualExplanations\n\n*Counterfactual Explanations and Algorithmic Recourse in Julia.*\n\n[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/stable) [![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/dev) [![Build Status](https://github.com/juliatrustworthyai/CounterfactualExplanations.jl/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/juliatrustworthyai/CounterfactualExplanations.jl/actions/workflows/CI.yml?query=branch%3Amain) [![Coverage](https://codecov.io/gh/juliatrustworthyai/CounterfactualExplanations.jl/branch/main/graph/badge.svg)](https://codecov.io/gh/juliatrustworthyai/CounterfactualExplanations.jl) [![Code Style: Blue](https://img.shields.io/badge/code%20style-blue-4495d1.svg)](https://github.com/invenia/BlueStyle) [![License](https://img.shields.io/github/license/juliatrustworthyai/CounterfactualExplanations.jl)](assets/intro.gif) [![Package Downloads](https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/CounterfactualExplanations/)](https://pkgs.genieframework.com?packages=CounterfactualExplanations) [![Aqua QA](https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg)](https://github.com/JuliaTesting/Aqua.jl)\n\n\n\n`CounterfactualExplanations.jl` is a package for generating Counterfactual Explanations (CE) and Algorithmic Recourse (AR) for black-box algorithms. Both CE and AR are related tools for explainable artificial intelligence (XAI). While the package is written purely in Julia, it can be used to explain machine learning algorithms developed and trained in other popular programming languages like Python and R. See below for a short introduction and other resources or dive straight into the [docs](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/dev).\n\nThere is also a corresponding paper, [*Explaining Black-Box Models through Counterfactuals*](https://proceedings.juliacon.org/papers/10.21105/jcon.00130), which has been published in JuliaCon Proceedings. Please consider citing the paper, if you use this package in your work:\n\n[![DOI](https://proceedings.juliacon.org/papers/10.21105/jcon.00130/status.svg)](https://doi.org/10.21105/jcon.00130) [![DOI](https://zenodo.org/badge/440782065.svg)](https://zenodo.org/badge/latestdoi/440782065) \n\n```\n@article{Altmeyer2023,\n  doi = {10.21105/jcon.00130},\n  url = {https://doi.org/10.21105/jcon.00130},\n  year = {2023},\n  publisher = {The Open Journal},\n  volume = {1},\n  number = {1},\n  pages = {130},\n  author = {Patrick Altmeyer and Arie van Deursen and Cynthia C. s. Liem},\n  title = {Explaining Black-Box Models through Counterfactuals},\n  journal = {Proceedings of the JuliaCon Conferences}\n}\n```\n\n## üö© Installation\n\nYou can install the stable release from [Julia's General Registry](https://github.com/JuliaRegistries/General) as follows:\n\n``` julia\nusing Pkg\nPkg.add(\"CounterfactualExplanations\")\n```\n\n`CounterfactualExplanations.jl` is under active development. To install the development version of the package you can run the following command:\n\n``` julia\nusing Pkg\nPkg.add(url=\"https://github.com/juliatrustworthyai/CounterfactualExplanations.jl\")\n```\n\n## ü§î Background and Motivation\n\nMachine learning models like Deep Neural Networks have become so complex, opaque and underspecified in the data that they are generally considered Black Boxes. Nonetheless, such models often play a key role in data-driven decision-making systems. This creates the following problem: human operators in charge of such systems have to rely on them blindly, while those individuals subject to them generally have no way of challenging an undesirable outcome:\n\n> \"You cannot appeal to (algorithms). They do not listen. Nor do they bend.\"\n>\n> --- Cathy O'Neil in [*Weapons of Math Destruction*](https://en.wikipedia.org/wiki/Weapons_of_Math_Destruction), 2016\n\n## üîÆ Enter: Counterfactual Explanations\n\nCounterfactual Explanations can help human stakeholders make sense of the systems they develop, use or endure: they explain how inputs into a system need to change for it to produce different decisions. Explainability benefits internal as well as external quality assurance.\n\nCounterfactual Explanations have a few properties that are desirable in the context of Explainable Artificial Intelligence (XAI). These include:\n\n-   Full fidelity to the black-box model, since no proxy is involved.\n-   No need for (reasonably) interpretable features as opposed to LIME and SHAP.\n-   Clear link to Algorithmic Recourse and Causal Inference.\n-   Less susceptible to adversarial attacks than LIME and SHAP.\n\n### Example: Give Me Some Credit\n\n\n\nConsider the following real-world scenario: a retail bank is using a black-box model trained on their clients' credit history to decide whether they will provide credit to new applicants. To simulate this scenario, we have pre-trained a binary classifier on the publicly available Give Me Some Credit dataset that ships with this package [@kaggle2011give].\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=20}\nThe figure below shows counterfactuals for 10 randomly chosen individuals that would have been denied credit initially. \n\n:::\n:::\n\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-commonmark/cell-5-output-1.svg){}\n:::\n:::\n\n\n### Example: MNIST\n\n\n\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=24}\nThe figure below shows a counterfactual generated for an image classifier trained on MNIST: in particular, it demonstrates which pixels need to change in order for the classifier to predict 3 instead of 8. \n\n:::\n:::\n\n\nSince `v0.1.9` counterfactual generators are fully composable. Here we have composed a generator that combines ideas from @wachter2017counterfactual and @altmeyer2023endogenous:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n# Compose generator:\nusing CounterfactualExplanations.Objectives: distance_from_target\ngenerator = GradientBasedGenerator()\n@chain generator begin\n    @objective logitcrossentropy + 0.1distance_mad + 0.1distance_from_target\n    @with_optimiser Adam(0.1)                  \nend\ncounterfactual_data.generative_model = vae # assign generative model\n```\n:::\n\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-commonmark/cell-10-output-1.svg){}\n:::\n:::\n\n\n## üîç Usage example\n\nGenerating counterfactuals will typically look like follows. Below we first fit a simple model to a synthetic dataset with linearly separable features and then draw a random sample:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n# Data and Classifier:\ncounterfactual_data = CounterfactualData(load_linearly_separable()...)\nM = fit_model(counterfactual_data, :Linear)\n\n# Select random sample:\ntarget = 2\nfactual = 1\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data, chosen)\n```\n:::\n\n\nTo this end, we specify a counterfactual generator of our choice:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\n# Counterfactual search:\ngenerator = DiCEGenerator(Œª=[0.1,0.3])\n```\n:::\n\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=29}\nHere, we have chosen to use the `GradientBasedGenerator` to move the individual from its factual label 1 to the target label 2.\n\n:::\n:::\n\n\nWith all of our ingredients specified, we finally generate counterfactuals using a simple API call:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nconv = conv = CounterfactualExplanations.Convergence.GeneratorConditionsConvergence()\nce = generate_counterfactual(\n  x, target, counterfactual_data, M, generator; \n  num_counterfactuals=3, convergence=conv,\n)\n```\n:::\n\n\nThe plot below shows the resulting counterfactual path:\n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=31}\n![](index_files/figure-commonmark/cell-15-output-1.svg){}\n:::\n:::\n\n\n## ‚òëÔ∏è Implemented Counterfactual Generators\n\nCurrently, the following counterfactual generators are implemented:\n\n-   ClaPROAR [@altmeyer2023endogenous]\n-   CLUE [@antoran2020getting]\n-   DiCE [@mothilal2020explaining]\n-   FeatureTweak [@tolomei2017interpretable]\n-   Generic\n-   GravitationalGenerator [@altmeyer2023endogenous]\n-   Greedy [@schut2021generating]\n-   GrowingSpheres [@laugel2017inverse]\n-   PROBE [@pawelczyk2022probabilistically]\n-   REVISE [@joshi2019realistic]\n-   Wachter [@wachter2017counterfactual]\n\n## üéØ Goals and limitations\n\nThe goal of this library is to contribute to efforts towards trustworthy machine learning in Julia. The Julia language has an edge when it comes to trustworthiness: it is very transparent. Packages like this one are generally written in pure Julia, which makes it easy for users and developers to understand and contribute to open-source code. Eventually, this project aims to offer a one-stop-shop of counterfactual explanations.\n\nOur ambition is to enhance the package through the following features:\n\n1.  Support for all supervised machine learning models trained in [`MLJ.jl`](https://alan-turing-institute.github.io/MLJ.jl/dev/).\n2.  Support for regression models.\n\n## üõ† Contribute\n\nContributions of any kind are very much welcome! Take a look at the [issue](https://github.com/juliatrustworthyai/CounterfactualExplanations.jl/issues) to see what things we are currently working on. If you have an idea for a new feature or want to report a bug, please open a new issue. \n\nIf your looking to contribute code, it may be helpful to check out the [Explanation](explanation/index.qmd) section of the docs. \n\nThere are also some general pointers for people looking to contribute to any of our Taija packages [here](https://github.com/JuliaTrustworthyAI#general-pointers-for-contributors).\n\nPlease follow the [SciML ColPrac guide](https://github.com/SciML/ColPrac).\n\n\n\n## üéì Citation\n\nIf you want to use this codebase, please consider citing the corresponding paper:\n\n```         \n@article{Altmeyer2023,\n  doi = {10.21105/jcon.00130},\n  url = {https://doi.org/10.21105/jcon.00130},\n  year = {2023},\n  publisher = {The Open Journal},\n  volume = {1},\n  number = {1},\n  pages = {130},\n  author = {Patrick Altmeyer and Arie van Deursen and Cynthia C. s. Liem},\n  title = {Explaining Black-Box Models through Counterfactuals},\n  journal = {Proceedings of the JuliaCon Conferences}\n}\n```\n\n## üìö References\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": []
  }
}
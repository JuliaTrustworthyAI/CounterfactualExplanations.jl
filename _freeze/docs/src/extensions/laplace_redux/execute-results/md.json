{
  "hash": "05ca45ef6e68354d98313d42a5bb7273",
  "result": {
    "engine": "jupyter",
    "markdown": "``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# [LaplaceRedux.jl](https://github.com/JuliaTrustworthyAI/LaplaceRedux.jl)\n\n[LaplaceRedux.jl](https://github.com/JuliaTrustworthyAI/LaplaceRedux.jl) is one of Taija's own packages that provides a framework for Effortless Bayesian Deep Learning through Laplace Approximation for Flux.jl neural networks. The methodology was first proposed by @immer2020improving and implemented in Python by @daxberger2021laplace. This is relevant to the work on counterfactual explanations (CE), because research has shown that counterfactual explanations for Bayesian models are typically more plausible, because Bayesian models are able to capture the uncertainty in the data [@schut2021generating].\n\n\n```{=commonmark}\n!!! tip \"Read More\"\n    To learn more about Laplace Redux, head over to the [official documentation](https://juliatrustworthyai.github.io/LaplaceRedux.jl/stable/).\n```\n\n\n## Example\n\n\n\nThe extension will be loaded automatically when loading the `LaplaceRedux` package (assuming the `CounterfactualExplanations` package is also loaded).\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing LaplaceRedux\n```\n:::\n\n\nNext, we will fit a neural network with Laplace Approximation to the moons dataset using our standard package API for doing so. By default, the Bayesian prior is optimized through empirical Bayes using the `LaplaceRedux` package.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n# Fit model to data:\ndata = CounterfactualData(load_moons()...)\nM = fit_model(data, :LaplaceRedux; n_hidden=16)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nLaplaceReduxExt.LaplaceNN(Laplace(Chain(Dense(2 => 16, relu), Dense(16 => 2)), :classification, :all, nothing, :full, LaplaceRedux.Curvature.GGN(Chain(Dense(2 => 16, relu), Dense(16 => 2)), :classification, Flux.Losses.logitcrossentropy, Array{Float32}[[-1.3098596 0.59241515; 0.91760206 0.02950162; … ; -0.018356863 0.12850936; -0.5381665 -0.7872097], [-0.2581085, -0.90997887, -0.5418944, -0.23735572, 0.81020063, -0.3033359, -0.47902864, -0.6432098, -0.038013518, 0.028280666, 0.009903266, -0.8796683, 0.41090682, 0.011093224, -0.1580453, 0.7911349], [3.092321 -2.4660816 … -0.3446268 -1.465249; -2.9468734 3.167357 … 0.31758657 1.7140366], [-0.3107697, 0.31076983]], 1.0, :all, nothing), 1.0, 0.0, Float32[-1.3098596, 0.91760206, 0.5239727, -1.1579771, -0.851813, -1.9411169, 0.47409698, 0.6679365, 0.8944433, 0.663116  …  -0.3172857, 0.15530388, 1.3264753, -0.3506721, -0.3446268, 0.31758657, -1.465249, 1.7140366, -0.3107697, 0.31076983], [0.10530027048093525 0.0 … 0.0 0.0; 0.0 0.10530027048093525 … 0.0 0.0; … ; 0.0 0.0 … 0.10530027048093525 0.0; 0.0 0.0 … 0.0 0.10530027048093525], [0.10066431429751965 0.0 … -0.030656783425475176 0.030656334963944154; 0.0 20.93513766443357 … -2.3185940232360736 2.3185965484008193; … ; -0.030656783425475176 -2.3185940232360736 … 1.0101450999063672 -1.0101448118057204; 0.030656334963944154 2.3185965484008193 … -1.0101448118057204 1.0101451389641771], [1.1006643142975197 0.0 … -0.030656783425475176 0.030656334963944154; 0.0 21.93513766443357 … -2.3185940232360736 2.3185965484008193; … ; -0.030656783425475176 -2.3185940232360736 … 2.0101450999063672 -1.0101448118057204; 0.030656334963944154 2.3185965484008193 … -1.0101448118057204 2.010145138964177], [0.9412600568016627 0.003106911671721699 … 0.003743740333409532 -0.003743452315572739; 0.003106912946573237 0.6539263732691709 … 0.0030385955287734246 -0.0030390041204196414; … ; 0.0037437406323562283 0.003038591829991259 … 0.9624905710233649 0.03750911813897676; -0.0037434526145225856 -0.0030390004216833593 … 0.03750911813898124 0.9624905774453485], 82, 250, 2, 997.8087484836578), :classification_multi)\n```\n:::\n:::\n\n\nFinally, we select a factual instance and generate a counterfactual explanation for it using the generic gradient-based CE method.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# Select a factual instance:\ntarget = 1\nfactual = 0\nchosen = rand(findall(predict_label(M, data) .== factual))\nx = select_factual(data, chosen)\n\n# Generate counterfactual explanation:\nη = 0.01\ngenerator = GenericGenerator(; opt=Descent(η), λ=0.01)\nconv = CounterfactualExplanations.Convergence.DecisionThresholdConvergence(;\n    decision_threshold=0.9, max_iter=100\n)\nce = generate_counterfactual(x, target, data, M, generator; convergence=conv)\nplot(ce, alpha=0.1)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](laplace_redux_files/figure-commonmark/cell-6-output-1.svg){}\n:::\n:::\n\n\n# References\n\n",
    "supporting": [
      "laplace_redux_files"
    ],
    "filters": []
  }
}
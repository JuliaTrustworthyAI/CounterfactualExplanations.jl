{
  "hash": "960efee6b47b160e124966e38fceb2c6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute: \n  output: true\n---\n\n``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Performance Benchmarks\n\nIn the previous tutorial, we have seen how counterfactual explanations can be evaluated. An important follow-up task is to compare the performance of different counterfactual generators is an important task. Researchers can use benchmarks to test new ideas they want to implement. Practitioners can find the right counterfactual generator for their specific use case through benchmarks. In this tutorial, we will see how to run benchmarks for counterfactual generators.\n\n## Post Hoc Benchmarking\n\nWe begin by continuing the discussion from the previous tutorial: suppose you have generated multiple counterfactual explanations for multiple individuals, like below:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# Factual and target:\nn_individuals = 5\nids = rand(findall(predict_label(M, counterfactual_data) .== factual), n_individuals)\nxs = select_factual(counterfactual_data, ids)\nces = generate_counterfactual(xs, target, counterfactual_data, M, generator; num_counterfactuals=5)\n```\n:::\n\n\nYou may be interested in comparing the outcomes across individuals. To benchmark the various counterfactual explanations using default evaluation measures, you can simply proceed as follows:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nbmk = benchmark(ces)\n```\n:::\n\n\nUnder the hood, the [`benchmark(counterfactual_explanations::Vector{CounterfactualExplanation})`](@ref) uses [`evaluate(counterfactual_explanations::CounterfactualExplanation)`](@ref) to generate a [`Benchmark`](@ref) object, which contains the evaluation in its most granular form as a `DataFrame`.\n\n### Working with `Benchmark`s\n\nFor convenience, the `DataFrame` containing the evaluation can be returned by simply calling the `Benchmark` object. By default, the aggregated evaluation measures across `id` (in line with the default behaviour of `evaluate`).\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nbmk()\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=5}\n\\begin{tabular}{r|ccccc}\n\t& sample & variable & value & generator & \\\\\n\t\\hline\n\t& Base.UUID & String & Float64 & Symbol & \\\\\n\t\\hline\n\t1 & 239104d0-f59f-11ee-3d0c-d1db071927ff & distance & 3.17243 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t2 & 239104d0-f59f-11ee-3d0c-d1db071927ff & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t3 & 239104d0-f59f-11ee-3d0c-d1db071927ff & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t4 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & distance & 3.07148 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t5 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t6 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t7 & 2398b916-f59f-11ee-3f13-bd00858a39af & distance & 3.62159 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t8 & 2398b916-f59f-11ee-3f13-bd00858a39af & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t9 & 2398b916-f59f-11ee-3f13-bd00858a39af & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t10 & 2398bce8-f59f-11ee-37c1-ef7c6de27b6b & distance & 2.62783 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t11 & 2398bce8-f59f-11ee-37c1-ef7c6de27b6b & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t12 & 2398bce8-f59f-11ee-37c1-ef7c6de27b6b & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t13 & 2398c08a-f59f-11ee-175b-81c155750752 & distance & 2.91985 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t14 & 2398c08a-f59f-11ee-175b-81c155750752 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t15 & 2398c08a-f59f-11ee-175b-81c155750752 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-stdout}\n```\n15×7 DataFrame\n Row │ sample                                variable    value    generator    ⋯\n     │ Base.UUID                             String      Float64  Symbol       ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 239104d0-f59f-11ee-3d0c-d1db071927ff  distance    3.17243  GradientBase ⋯\n   2 │ 239104d0-f59f-11ee-3d0c-d1db071927ff  redundancy  0.0      GradientBase\n   3 │ 239104d0-f59f-11ee-3d0c-d1db071927ff  validity    1.0      GradientBase\n   4 │ 2398b3e2-f59f-11ee-3323-13d53fb7e75b  distance    3.07148  GradientBase\n   5 │ 2398b3e2-f59f-11ee-3323-13d53fb7e75b  redundancy  0.0      GradientBase ⋯\n   6 │ 2398b3e2-f59f-11ee-3323-13d53fb7e75b  validity    1.0      GradientBase\n   7 │ 2398b916-f59f-11ee-3f13-bd00858a39af  distance    3.62159  GradientBase\n   8 │ 2398b916-f59f-11ee-3f13-bd00858a39af  redundancy  0.0      GradientBase\n   9 │ 2398b916-f59f-11ee-3f13-bd00858a39af  validity    1.0      GradientBase ⋯\n  10 │ 2398bce8-f59f-11ee-37c1-ef7c6de27b6b  distance    2.62783  GradientBase\n  11 │ 2398bce8-f59f-11ee-37c1-ef7c6de27b6b  redundancy  0.0      GradientBase\n  12 │ 2398bce8-f59f-11ee-37c1-ef7c6de27b6b  validity    1.0      GradientBase\n  13 │ 2398c08a-f59f-11ee-175b-81c155750752  distance    2.91985  GradientBase ⋯\n  14 │ 2398c08a-f59f-11ee-175b-81c155750752  redundancy  0.0      GradientBase\n  15 │ 2398c08a-f59f-11ee-175b-81c155750752  validity    1.0      GradientBase\n                                                               4 columns omitted\n```\n:::\n:::\n\n\nTo retrieve the granular dataset, simply do:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nbmk(agg=nothing)\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=7}\n\\begin{tabular}{r|cccccc}\n\t& sample & num\\_counterfactual & variable & value & generator & \\\\\n\t\\hline\n\t& Base.UUID & Int64 & String & Float64 & Symbol & \\\\\n\t\\hline\n\t1 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 1 & distance & 3.15903 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t2 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 2 & distance & 3.16773 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t3 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 3 & distance & 3.17011 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t4 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 4 & distance & 3.20239 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t5 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 5 & distance & 3.16291 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t6 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t7 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 2 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t8 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 3 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t9 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 4 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t10 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 5 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t11 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t12 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 2 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t13 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 3 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t14 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 4 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t15 & 239104d0-f59f-11ee-3d0c-d1db071927ff & 5 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t16 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 1 & distance & 3.02225 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t17 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 2 & distance & 3.01539 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t18 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 3 & distance & 3.00694 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t19 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 4 & distance & 3.15326 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t20 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 5 & distance & 3.15957 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t21 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t22 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 2 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t23 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 3 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t24 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 4 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t25 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 5 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t26 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t27 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 2 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t28 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 3 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t29 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 4 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t30 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & 5 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, false, Descent(0.1), NamedTuple()) & $\\dots$ \\\\\n\t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ &  \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\n75×8 DataFrame\n Row │ sample                                num_counterfactual  variable    v ⋯\n     │ Base.UUID                             Int64               String      F ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   1  distance    3 ⋯\n   2 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   2  distance    3\n   3 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   3  distance    3\n   4 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   4  distance    3\n   5 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   5  distance    3 ⋯\n   6 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   1  redundancy  0\n   7 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   2  redundancy  0\n   8 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   3  redundancy  0\n   9 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   4  redundancy  0 ⋯\n  10 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   5  redundancy  0\n  11 │ 239104d0-f59f-11ee-3d0c-d1db071927ff                   1  validity    1\n  ⋮  │                  ⋮                            ⋮               ⋮         ⋱\n  66 │ 2398c08a-f59f-11ee-175b-81c155750752                   1  redundancy  0\n  67 │ 2398c08a-f59f-11ee-175b-81c155750752                   2  redundancy  0 ⋯\n  68 │ 2398c08a-f59f-11ee-175b-81c155750752                   3  redundancy  0\n  69 │ 2398c08a-f59f-11ee-175b-81c155750752                   4  redundancy  0\n  70 │ 2398c08a-f59f-11ee-175b-81c155750752                   5  redundancy  0\n  71 │ 2398c08a-f59f-11ee-175b-81c155750752                   1  validity    1 ⋯\n  72 │ 2398c08a-f59f-11ee-175b-81c155750752                   2  validity    1\n  73 │ 2398c08a-f59f-11ee-175b-81c155750752                   3  validity    1\n  74 │ 2398c08a-f59f-11ee-175b-81c155750752                   4  validity    1\n  75 │ 2398c08a-f59f-11ee-175b-81c155750752                   5  validity    1 ⋯\n                                                   5 columns and 54 rows omitted\n```\n:::\n:::\n\n\nSince benchmarks return a `DataFrame` object on call, post-processing is straightforward. For example, we could use [`Tidier.jl`](https://kdpsingh.github.io/Tidier.jl/dev/):\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nusing Tidier\n@chain bmk() begin\n    @filter(variable == \"distance\")\n    @select(sample, variable, value)\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=9}\n\\begin{tabular}{r|ccc}\n\t& sample & variable & value\\\\\n\t\\hline\n\t& Base.UUID & String & Float64\\\\\n\t\\hline\n\t1 & 239104d0-f59f-11ee-3d0c-d1db071927ff & distance & 3.17243 \\\\\n\t2 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & distance & 3.07148 \\\\\n\t3 & 2398b916-f59f-11ee-3f13-bd00858a39af & distance & 3.62159 \\\\\n\t4 & 2398bce8-f59f-11ee-37c1-ef7c6de27b6b & distance & 2.62783 \\\\\n\t5 & 2398c08a-f59f-11ee-175b-81c155750752 & distance & 2.91985 \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-stdout}\n```\n5×3 DataFrame\n Row │ sample                                variable  value   \n     │ Base.UUID                             String    Float64 \n─────┼─────────────────────────────────────────────────────────\n   1 │ 239104d0-f59f-11ee-3d0c-d1db071927ff  distance  3.17243\n   2 │ 2398b3e2-f59f-11ee-3323-13d53fb7e75b  distance  3.07148\n   3 │ 2398b916-f59f-11ee-3f13-bd00858a39af  distance  3.62159\n   4 │ 2398bce8-f59f-11ee-37c1-ef7c6de27b6b  distance  2.62783\n   5 │ 2398c08a-f59f-11ee-175b-81c155750752  distance  2.91985\n```\n:::\n:::\n\n\n### Metadata for Counterfactual Explanations\n\nBenchmarks always report metadata for each counterfactual explanation, which is automatically inferred by default. The default metadata concerns the explained `model` and the employed `generator`. In the current example, we used the same model and generator for each individual:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n@chain bmk() begin\n    @group_by(sample)\n    @select(sample, model, generator)\n    @summarize(model=first(model),generator=first(generator))\n    @ungroup\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=11}\n\\begin{tabular}{r|ccc}\n\t& sample & model & \\\\\n\t\\hline\n\t& Base.UUID & Symbol & \\\\\n\t\\hline\n\t1 & 239104d0-f59f-11ee-3d0c-d1db071927ff & FluxModel(Chain(Dense(2 => 2)), :classification\\_multi) & $\\dots$ \\\\\n\t2 & 2398b3e2-f59f-11ee-3323-13d53fb7e75b & FluxModel(Chain(Dense(2 => 2)), :classification\\_multi) & $\\dots$ \\\\\n\t3 & 2398b916-f59f-11ee-3f13-bd00858a39af & FluxModel(Chain(Dense(2 => 2)), :classification\\_multi) & $\\dots$ \\\\\n\t4 & 2398bce8-f59f-11ee-37c1-ef7c6de27b6b & FluxModel(Chain(Dense(2 => 2)), :classification\\_multi) & $\\dots$ \\\\\n\t5 & 2398c08a-f59f-11ee-175b-81c155750752 & FluxModel(Chain(Dense(2 => 2)), :classification\\_multi) & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-stdout}\n```\n5×3 DataFrame\n Row │ sample                                model                             ⋯\n     │ Base.UUID                             Symbol                            ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 239104d0-f59f-11ee-3d0c-d1db071927ff  FluxModel(Chain(Dense(2 => 2)), … ⋯\n   2 │ 2398b3e2-f59f-11ee-3323-13d53fb7e75b  FluxModel(Chain(Dense(2 => 2)), …\n   3 │ 2398b916-f59f-11ee-3f13-bd00858a39af  FluxModel(Chain(Dense(2 => 2)), …\n   4 │ 2398bce8-f59f-11ee-37c1-ef7c6de27b6b  FluxModel(Chain(Dense(2 => 2)), …\n   5 │ 2398c08a-f59f-11ee-175b-81c155750752  FluxModel(Chain(Dense(2 => 2)), … ⋯\n                                                                1 column omitted\n```\n:::\n:::\n\n\nMetadata can also be provided as an optional key argument.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nmeta_data = Dict(\n    :generator => \"Generic\",\n    :model => \"MLP\",\n)\nmeta_data = [meta_data for i in 1:length(ces)]\nbmk = benchmark(ces; meta_data=meta_data)\n@chain bmk() begin\n    @group_by(sample)\n    @select(sample, model, generator)\n    @summarize(model=first(model),generator=first(generator))\n    @ungroup\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=13}\n\\begin{tabular}{r|ccc}\n\t& sample & model & generator\\\\\n\t\\hline\n\t& Base.UUID & String & String\\\\\n\t\\hline\n\t1 & 27fae496-f59f-11ee-2c30-f35d1025a6d4 & MLP & Generic \\\\\n\t2 & 27fdcc6a-f59f-11ee-030b-152c9794c5f1 & MLP & Generic \\\\\n\t3 & 27fdd04a-f59f-11ee-2010-e1732ff5d8d2 & MLP & Generic \\\\\n\t4 & 27fdd340-f59f-11ee-1d20-050a69dcacef & MLP & Generic \\\\\n\t5 & 27fdd5fc-f59f-11ee-02e8-d198e436abb3 & MLP & Generic \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-stdout}\n```\n5×3 DataFrame\n Row │ sample                                model   generator \n     │ Base.UUID                             String  String    \n─────┼─────────────────────────────────────────────────────────\n   1 │ 27fae496-f59f-11ee-2c30-f35d1025a6d4  MLP     Generic\n   2 │ 27fdcc6a-f59f-11ee-030b-152c9794c5f1  MLP     Generic\n   3 │ 27fdd04a-f59f-11ee-2010-e1732ff5d8d2  MLP     Generic\n   4 │ 27fdd340-f59f-11ee-1d20-050a69dcacef  MLP     Generic\n   5 │ 27fdd5fc-f59f-11ee-02e8-d198e436abb3  MLP     Generic\n```\n:::\n:::\n\n\n## Ad Hoc Benchmarking\n\nSo far we have assumed the following workflow:\n\n1.  Fit some machine learning model.\n2.  Generate counterfactual explanations for some individual(s) (`generate_counterfactual`).\n3.  Evaluate and benchmark them (`benchmark(ces::Vector{CounterfactualExplanation})`).\n\nIn many cases, it may be preferable to combine these steps. To this end, we have added support for two scenarios of Ad Hoc Benchmarking.\n\n### Pre-trained Models\n\nIn the first scenario, it is assumed that the machine learning models have been pre-trained and so the workflow can be summarized as follows:\n\n1.  Fit some machine learning model(s).\n2.  Generate counterfactual explanations and benchmark them.\n\nWe suspect that this is the most common workflow for practitioners who are interested in benchmarking counterfactual explanations for the pre-trained machine learning models. Let's go through this workflow using a simple example. We first train some models and store them in a dictionary:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nmodels = Dict(\n    :MLP => fit_model(counterfactual_data, :MLP),\n    :Linear => fit_model(counterfactual_data, :Linear),\n)\n```\n:::\n\n\nNext, we store the counterfactual generators of interest in a dictionary as well:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\ngenerators = Dict(\n    :Generic => GenericGenerator(),\n    :Gravitational => GravitationalGenerator(),\n    :Wachter => WachterGenerator(),\n    :ClaPROAR => ClaPROARGenerator(),\n)\n```\n:::\n\n\nThen we can run a benchmark for individual(s) `x`, a pre-specified `target` and `counterfactual_data` as follows:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nbmk = benchmark(x, target, counterfactual_data; models=models, generators=generators)\n```\n:::\n\n\nIn this case, metadata is automatically inferred from the dictionaries:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\n@chain bmk() begin\n    @filter(variable == \"distance\")\n    @select(sample, variable, value, model, generator)\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=18}\n\\begin{tabular}{r|ccccc}\n\t& sample & variable & value & model & \\\\\n\t\\hline\n\t& Base.UUID & String & Float64 & Tuple… & \\\\\n\t\\hline\n\t1 & 2cba5eee-f59f-11ee-1844-cbc7a8372a38 & distance & 4.38877 & (:Linear, FluxModel(Chain(Dense(2 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t2 & 2cd740fe-f59f-11ee-35c3-1157eb1b7583 & distance & 4.17021 & (:Linear, FluxModel(Chain(Dense(2 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t3 & 2cd741e2-f59f-11ee-2b09-0d55ef9892b9 & distance & 4.31145 & (:Linear, FluxModel(Chain(Dense(2 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t4 & 2cd7420c-f59f-11ee-1996-6fa75e23bb57 & distance & 4.17035 & (:Linear, FluxModel(Chain(Dense(2 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t5 & 2cd74234-f59f-11ee-0ad0-9f21949f5932 & distance & 5.73182 & (:MLP, FluxModel(Chain(Dense(2 => 10, relu), Dense(10 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t6 & 2cd7425c-f59f-11ee-3eb4-af34f85ffd3d & distance & 5.50606 & (:MLP, FluxModel(Chain(Dense(2 => 10, relu), Dense(10 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t7 & 2cd7427a-f59f-11ee-10d3-a1df6c8dc125 & distance & 5.2114 & (:MLP, FluxModel(Chain(Dense(2 => 10, relu), Dense(10 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\t8 & 2cd74298-f59f-11ee-32d1-f501c104fea8 & distance & 5.3623 & (:MLP, FluxModel(Chain(Dense(2 => 10, relu), Dense(10 => 2)), :classification\\_multi)) & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-stdout}\n```\n8×5 DataFrame\n Row │ sample                                variable  value    model          ⋯\n     │ Base.UUID                             String    Float64  Tuple…         ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 2cba5eee-f59f-11ee-1844-cbc7a8372a38  distance  4.38877  (:Linear, Flux ⋯\n   2 │ 2cd740fe-f59f-11ee-35c3-1157eb1b7583  distance  4.17021  (:Linear, Flux\n   3 │ 2cd741e2-f59f-11ee-2b09-0d55ef9892b9  distance  4.31145  (:Linear, Flux\n   4 │ 2cd7420c-f59f-11ee-1996-6fa75e23bb57  distance  4.17035  (:Linear, Flux\n   5 │ 2cd74234-f59f-11ee-0ad0-9f21949f5932  distance  5.73182  (:MLP, FluxMod ⋯\n   6 │ 2cd7425c-f59f-11ee-3eb4-af34f85ffd3d  distance  5.50606  (:MLP, FluxMod\n   7 │ 2cd7427a-f59f-11ee-10d3-a1df6c8dc125  distance  5.2114   (:MLP, FluxMod\n   8 │ 2cd74298-f59f-11ee-32d1-f501c104fea8  distance  5.3623   (:MLP, FluxMod\n                                                               2 columns omitted\n```\n:::\n:::\n\n\n### Everything at once\n\nResearchers, in particular, may be interested in combining all steps into one. This is the second scenario of Ad Hoc Benchmarking:\n\n1.  Fit some machine learning model(s), generate counterfactual explanations and benchmark them.\n\nIt involves calling `benchmark` directly on counterfactual data (the only positional argument):\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nbmk = benchmark(counterfactual_data)\n```\n:::\n\n\nThis will use the default models from [`standard_models_catalogue`](@ref) and train them on the data. All available generators from [`generator_catalogue`](@ref) will also be used:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\n@chain bmk() begin\n    @filter(variable == \"validity\")\n    @select(sample, variable, value, model, generator)\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=21}\n\\begin{tabular}{r|ccccc}\n\t& sample & variable & value & model & generator\\\\\n\t\\hline\n\t& Base.UUID & String & Float64 & Symbol & Symbol\\\\\n\t\\hline\n\t1 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & gravitational \\\\\n\t2 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & growing\\_spheres \\\\\n\t3 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & revise \\\\\n\t4 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & clue \\\\\n\t5 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & probe \\\\\n\t6 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & dice \\\\\n\t7 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & claproar \\\\\n\t8 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & wachter \\\\\n\t9 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & generic \\\\\n\t10 & 32d1817e-f59f-11ee-152f-a30b18c2e6f7 & validity & 1.0 & Linear & greedy \\\\\n\t11 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & gravitational \\\\\n\t12 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & growing\\_spheres \\\\\n\t13 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & revise \\\\\n\t14 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & clue \\\\\n\t15 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & probe \\\\\n\t16 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & dice \\\\\n\t17 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & claproar \\\\\n\t18 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & wachter \\\\\n\t19 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & generic \\\\\n\t20 & 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8 & validity & 1.0 & Linear & greedy \\\\\n\t21 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & gravitational \\\\\n\t22 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & growing\\_spheres \\\\\n\t23 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & revise \\\\\n\t24 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & clue \\\\\n\t25 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & probe \\\\\n\t26 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & dice \\\\\n\t27 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & claproar \\\\\n\t28 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & wachter \\\\\n\t29 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & generic \\\\\n\t30 & 32d25630-f59f-11ee-1eaa-8b41ea362e41 & validity & 1.0 & Linear & greedy \\\\\n\t$\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-stdout}\n```\n200×5 DataFrame\n Row │ sample                                variable  value    model   genera ⋯\n     │ Base.UUID                             String    Float64  Symbol  Symbol ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  gravit ⋯\n   2 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  growin\n   3 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  revise\n   4 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  clue\n   5 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  probe  ⋯\n   6 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  dice\n   7 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  clapro\n   8 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  wachte\n   9 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  generi ⋯\n  10 │ 32d1817e-f59f-11ee-152f-a30b18c2e6f7  validity      1.0  Linear  greedy\n  11 │ 32d255e8-f59f-11ee-3e8d-a9e9f6e23ea8  validity      1.0  Linear  gravit\n  ⋮  │                  ⋮                       ⋮         ⋮       ⋮            ⋱\n 191 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     gravit\n 192 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     growin ⋯\n 193 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     revise\n 194 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     clue\n 195 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     probe\n 196 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     dice   ⋯\n 197 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     clapro\n 198 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     wachte\n 199 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     generi\n 200 │ 3382d08a-f59f-11ee-10b3-f7d18cf7d3b5  validity      1.0  MLP     greedy ⋯\n                                                   1 column and 179 rows omitted\n```\n:::\n:::\n\n\nOptionally, you can instead provide a dictionary of `models` and `generators` as before. Each value in the `models` dictionary should be one of two things:\n\na.  Either be an object `M` of type [`AbstractFittedModel`](@ref) that implements the [`Models.train`](@ref) method.\nb.  Or a `DataType` that can be called on [`CounterfactualData`](@ref) to create an object `M` as in (a).\n\n## Multiple Datasets\n\nBenchmarks are run on single instances of type [`CounterfactualData`](@ref). This is our design choice for two reasons:\n\n1.  We want to avoid the loops inside the `benchmark` method(s) from getting too nested and convoluted.\n2.  While it is straightforward to infer metadata for models and generators, this is not the case for datasets.\n\nFortunately, it is very easy to run benchmarks for multiple datasets anyway, since `Benchmark` instances can be concatenated. To see how, let's consider an example involving multiple datasets, models and generators:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\n# Data:\ndatasets = Dict(\n    :moons => CounterfactualData(load_moons()...),\n    :circles => CounterfactualData(load_circles()...),\n)\n\n# Models:\nmodels = Dict(\n    :MLP => FluxModel,\n    :Linear => Linear,\n)\n\n# Generators:\ngenerators = Dict(\n    :Generic => GenericGenerator(),\n    :Greedy => GreedyGenerator(),\n)\n```\n:::\n\n\nThen we can simply loop over the datasets and eventually concatenate the results like so:\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Evaluation: distance_measures\nbmks = []\nfor (dataname, dataset) in datasets\n    bmk = benchmark(dataset; models=models, generators=generators, measure=distance_measures)\n    push!(bmks, bmk)\nend\nbmk = vcat(bmks[1], bmks[2]; ids=collect(keys(datasets)))\n```\n:::\n\n\nWhen `ids` are supplied, then a new id column is added to the evaluation data frame that contains unique identifiers for the different benchmarks. The optional `idcol_name` argument can be used to specify the name for that indicator column (defaults to `\"dataset\"`):\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\n@chain bmk() begin\n    @group_by(dataset, generator)\n    @filter(model == :MLP)\n    @filter(variable == \"distance_l1\")\n    @summarize(L1_norm=mean(value))\n    @ungroup\nend\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=25}\n\\begin{tabular}{r|ccc}\n\t& dataset & generator & L1\\_norm\\\\\n\t\\hline\n\t& Symbol & Symbol & Float32\\\\\n\t\\hline\n\t1 & moons & Generic & 1.56555 \\\\\n\t2 & moons & Greedy & 0.819269 \\\\\n\t3 & circles & Generic & 1.83524 \\\\\n\t4 & circles & Greedy & 0.498953 \\\\\n\\end{tabular}\n\n:::\n:::\n\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-stdout}\n```\n4×3 DataFrame\n Row │ dataset  generator  L1_norm  \n     │ Symbol   Symbol     Float32  \n─────┼──────────────────────────────\n   1 │ moons    Generic    1.56555\n   2 │ moons    Greedy     0.819269\n   3 │ circles  Generic    1.83524\n   4 │ circles  Greedy     0.498953\n```\n:::\n:::\n\n\n",
    "supporting": [
      "benchmarking_files"
    ],
    "filters": []
  }
}
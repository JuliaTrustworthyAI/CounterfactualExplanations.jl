{
  "hash": "6c7031827b16e9105e8e62d898641ead",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Simple Example\n\nIn this tutorial, we will go through a simple example involving synthetic data and a generic counterfactual generator.\n\n## Data and Classifier\n\nBelow we generate some linearly separable data and fit a simple MLP classifier with batch normalization to it. \nFor more information on generating data and models, refer to the `Handling Data` and `Handling Models` tutorials respectively.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# Counteractual data and model:\nflux_training_params.batchsize = 10\ndata = TaijaData.load_linearly_separable()\ncounterfactual_data = DataPreprocessing.CounterfactualData(data...)\ncounterfactual_data.standardize = true\nM = fit_model(counterfactual_data, :MLP, batch_norm=true)\n```\n:::\n\n\n## Counterfactual Search\n\nNext, determine a target and factual class for our counterfactual search and select a random factual instance to explain.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ntarget = 2\nfactual = 1\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data, chosen)\n```\n:::\n\n\nFinally, we generate and visualize the generated counterfactual:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n# Search:\ngenerator = WachterGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\nplot(ce)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](simple_example_files/figure-commonmark/cell-5-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "simple_example_files"
    ],
    "filters": []
  }
}
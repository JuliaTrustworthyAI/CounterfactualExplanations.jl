{
  "hash": "e4e5965ca2f74f8daabc048f3773a72c",
  "result": {
    "engine": "jupyter",
    "markdown": "``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Whistle-Stop Tour\n\nIn this tutorial, we will go through a slightly more complex example involving synthetic data. We will generate Counterfactual Explanations using different generators and visualize the results.\n\n## Data and Classifier\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# Choose some values for data and a model:\nn_dim = 2\nn_classes = 4\nn_samples = 400\nmodel_name = :MLP\n```\n:::\n\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=4}\nThe code chunk below generates synthetic data and uses it to fit a classifier. The outcome variable `counterfactual_data.y` consists of 4 classes. The input data `counterfactual_data.X` consists of 2 features. We generate a total of 400 samples. On the model side, we have specified `model_name = :MLP`. The `fit_model` can be used to fit a number of default models.\n\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndata = TaijaData.load_multi_class(n_samples)\ncounterfactual_data = DataPreprocessing.CounterfactualData(data...)\nM = fit_model(counterfactual_data, model_name)\n```\n:::\n\n\nThe chart below visualizes our data along with the model predictions. In particular, the contour indicates the predicted probabilities generated by our classifier. By default, these are the predicted probabilities for $y=1$, the first label. For multi-dimensional input data is compressed into two dimensions and the decision boundary is approximated using Nearest Neighbors (this is still somewhat experimental).\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nplot(M, counterfactual_data)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](whistle_stop_files/figure-commonmark/cell-6-output-1.svg){}\n:::\n:::\n\n\n## Counterfactual Explanation\n\nNext, we begin by specifying our target and factual label. We then draw a random sample from the non-target (factual) class.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n# Factual and target:\ntarget = 2\nfactual = 4\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data, chosen)\n```\n:::\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=8}\nThis sets the baseline for our counterfactual search: we plan to perturb the factual `x` to change the predicted label from `y`=4 to our target label `target`=2.\n\n:::\n:::\n\n\nCounterfactual generators accept several default parameters that can be used to adjust the counterfactual search at a high level: for example, a `Flux.jl` optimizer can be supplied to define how exactly gradient steps are performed. Importantly, one can also define the threshold probability at which the counterfactual search will converge. This relates to the probability predicted by the underlying black-box model, that the counterfactual belongs to the target class. A higher decision threshold typically prolongs the counterfactual search.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n# Search params:\ndecision_threshold = 0.75\nnum_counterfactuals = 3\n```\n:::\n\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=10}\nThe code below runs the counterfactual search for each generator available in the `generator_catalogue`. In each case, we also call the generic `plot()` method on the generated instance of type `CounterfactualExplanation`. This generates a simple plot that visualizes the entire counterfactual path. The chart below shows the results for all counterfactual generators: Factual: 4 → Target: 2.\n\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nces = Dict()\nplts = []\nplottable_generators = filter(((k,v),) -> k ∉ [:growing_spheres, :feature_tweak], generator_catalogue)\n# Search:\nfor (key, Generator) in plottable_generators\n    generator = Generator()\n    ce = generate_counterfactual(\n        x, target, counterfactual_data, M, generator;\n        num_counterfactuals = num_counterfactuals,\n        convergence=GeneratorConditionsConvergence(\n            decision_threshold=decision_threshold\n        )\n    )\n    ces[key] = ce\n    plts = [plts..., plot(ce; title=key, colorbar=false)]\nend\n```\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](whistle_stop_files/figure-commonmark/cell-12-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "whistle_stop_files"
    ],
    "filters": []
  }
}
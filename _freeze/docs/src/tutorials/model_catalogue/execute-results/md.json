{
  "hash": "1bb937b6c35507955d063af93e886552",
  "result": {
    "engine": "jupyter",
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Model Catalogue\n\nWhile in general it is assumed that users will use this package to explain their pre-trained models, we provide out-of-the-box functionality to train various simple default models. In this tutorial, we will see how these models can be fitted to `CounterfactualData`.\n\n## Available Models\n\nThe `standard_models_catalogue` can be used to inspect the available default models: \n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nstandard_models_catalogue\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nDict{Symbol, Any} with 4 entries:\n  :Linear       => Linear\n  :LaplaceRedux => LaplaceReduxModel\n  :DeepEnsemble => FluxEnsemble\n  :MLP          => FluxModel\n```\n:::\n:::\n\n\nThe dictionary keys correspond to the model names. In this case, the dictionary values are constructors that can be used called on instances of type `CounterfactualData` to fit the corresponding model. In most cases, users will find it most convenient to use the [`fit_model`](@ref) API call instead.\n\n## Fitting Models\n\nModels from the standard model catalogue are a core part of the package and thus compatible with all offered counterfactual generators and functionalities.\n\nThe `all_models_catalogue` can be used to inspect all models offered by the package:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nall_models_catalogue\n```\n:::\n\n\nHowever, when using models not included in the `standard_models_catalogue`, additional caution is advised: they might not be supported by all counterfactual generators or they might not be models native to Julia. Thus, a more thorough reading of their documentation may be necessary to make sure that they are used correctly.\n\n## Fitting Flux Models\n\nFirst, let's load one of the synthetic datasets. For this, we'll first need to import the `TaijaData.jl` package:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nn = 500\ndata = TaijaData.load_multi_class(n)\ncounterfactual_data = DataPreprocessing.CounterfactualData(data...)\n```\n:::\n\n\nWe could use a Deep Ensemble [@lakshminarayanan2016simple] as follows:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nM = fit_model(counterfactual_data, :DeepEnsemble)\n```\n:::\n\n\nThe returned object is an instance of type `FluxEnsemble <: AbstractModel` and can be used in downstream tasks without further ado. For example, the resulting fit can be visualised using the generic `plot()` method as:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nplts = []\nfor target in counterfactual_data.y_levels\n    plt = plot(M, counterfactual_data; target=target, title=\"p(y=$(target)|x,Î¸)\")\n    plts = [plts..., plt]\nend\nplot(plts...)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](model_catalogue_files/figure-commonmark/cell-7-output-1.svg){}\n:::\n:::\n\n\n## Importing PyTorch models\n\nThe package supports generating counterfactuals for any neural network that has been previously defined and trained using PyTorch, regardless of the specific architectural details of the model. To generate counterfactuals for a PyTorch model, save the model inside a `.pt` file and call the following function:\n\n```julia\nmodel_loaded = TaijaInteroperability.pytorch_model_loader(\n    \"$(pwd())/docs/src/tutorials/miscellaneous\",\n    \"neural_network_class\",\n    \"NeuralNetwork\",\n    \"$(pwd())/docs/src/tutorials/miscellaneous/pretrained_model.pt\"\n)\n```\n\nThe method `pytorch_model_loader` requires four arguments:\n1. The path to the folder with a `.py` file where the PyTorch model is defined\n2. The name of the file where the PyTorch model is defined\n3. The name of the class of the PyTorch model\n4. The path to the Pickle file that holds the model weights\n\nIn the above case:\n1. The file defining the model is inside `$(pwd())/docs/src/tutorials/miscellaneous`\n2. The name of the `.py` file holding the model definition is `neural_network_class`\n3. The name of the model class is NeuralNetwork\n4. The Pickle file is located at `$(pwd())/docs/src/tutorials/miscellaneous/pretrained_model.pt`\n\nThough the model file and Pickle file are inside the same directory in this tutorial, this does not necessarily have to be the case.\n\nThe reason why the model file and Pickle file have to be provided separately is that the package expects an already trained PyTorch model as input. It is also possible to define new PyTorch models within the package, but since this is not the expected use of our package, special support is not offered for that. A guide for defining Python and PyTorch classes in Julia through `PythonCall.jl` can be found [here](https://cjdoris.github.io/PythonCall.jl/stable/pythoncall-reference/#Create-classes).\n\nOnce the PyTorch model has been loaded into the package, wrap it inside the PyTorchModel class:\n\n```julia\nmodel_pytorch = TaijaInteroperability.PyTorchModel(model_loaded, counterfactual_data.likelihood)\n```\n\nThis model can now be passed into the generators like any other.\n\nPlease note that the functionality for generating counterfactuals for Python models is only available if your Julia version is 1.8 or above. For Julia 1.7 users, we recommend upgrading the version to 1.8 or 1.9 before loading a PyTorch model into the package.\n\n## Importing R torch models\n\n\n```{=commonmark}\n!!! warning \"Not fully tested\"\n    Please note that due to the incompatibility between RCall and PythonCall, it is not feasible to test both PyTorch and RTorch implementations within the same pipeline. While the RTorch implementation has been manually tested, we cannot ensure its consistent functionality as it is inherently susceptible to bugs.\n```\n\n\nThe CounterfactualExplanations package supports generating counterfactuals for neural networks that have been defined and trained using R torch. Regardless of the specific architectural details of the model, you can easily generate counterfactual explanations by following these steps.\n\n### Saving the R torch model\n\nFirst, save your trained R torch model as a `.pt` file using the `torch_save()` function provided by the R torch library. This function allows you to serialize the model and save it to a file. For example:\n\n```R\ntorch_save(model, file = \"$(pwd())/docs/src/tutorials/miscellaneous/r_model.pt\")\n```\n\nMake sure to specify the correct file path where you want to save the model.\n\n### Loading the R torch model\n\nTo import the R torch model into the CounterfactualExplanations package, use the `rtorch_model_loader()` function. This function loads the model from the previously saved `.pt` file. Here is an example of how to load the R torch model:\n\n```julia\nmodel_loaded = TaijaInteroperability.rtorch_model_loader(\"$(pwd())/docs/src/tutorials/miscellaneous/r_model.pt\")\n```\n\nThe `rtorch_model_loader()` function requires only one argument:\n1. `model_path`: The path to the `.pt` file that contains the trained R torch model.\n\n### Wrapping the R torch model\n\nOnce the R torch model has been loaded into the package, wrap it inside the `RTorchModel` class. This step prepares the model to be used by the counterfactual generators. Here is an example:\n\n```julia\nmodel_R = TaijaInteroperability.RTorchModel(model_loaded, counterfactual_data.likelihood)\n```\n\n### Generating counterfactuals with the R torch model\n\nNow that the R torch model has been wrapped inside the `RTorchModel` class, you can pass it into the counterfactual generators as you would with any other model.\n\nPlease note that RCall is not fully compatible with PythonCall. Therefore, it is advisable not to import both R torch and PyTorch models within the same Julia session. Additionally, it's worth mentioning that the R torch integration is still untested in the CounterfactualExplanations package.\n\n## Tuning Flux Models\n\nBy default, model architectures are very simple. Through optional arguments, users have some control over the neural network architecture and can choose to impose regularization through dropout. Let's tackle a more challenging dataset: MNIST [@lecun1998mnist]. \n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\ndata = TaijaData.load_mnist(10000)\ncounterfactual_data = DataPreprocessing.CounterfactualData(data...)\ntrain_data, test_data = \n    CounterfactualExplanations.DataPreprocessing.train_test_split(counterfactual_data)\n```\n:::\n\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](model_catalogue_files/figure-commonmark/cell-9-output-1.svg){}\n:::\n:::\n\n\nIn this case, we will use a Multi-Layer Perceptron (MLP) but we will adjust the model and training hyperparameters. Parameters related to training of `Flux.jl` models are currently stored in a mutable container:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nflux_training_params\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nCounterfactualExplanations.FluxModelParams\n  loss: Symbol logitbinarycrossentropy\n  opt: Symbol Adam\n  n_epochs: Int64 100\n  batchsize: Int64 1\n  verbose: Bool false\n```\n:::\n:::\n\n\nIn cases like this one, where model training can be expected to take a few moments, it can be useful to activate verbosity, so let's set the corresponding field value to `true`. We'll also impose mini-batch training:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nflux_training_params.verbose = true\nflux_training_params.batchsize = round(size(train_data.X,2)/10)\n```\n:::\n\n\nTo account for the fact that this is a slightly more challenging task, we will use an appropriate number of hidden neurons per layer. We will also activate dropout regularization. To scale networks up further, it is also possible to adjust the number of hidden layers, which we will not do here.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nmodel_params = (\n    n_hidden = 32,\n    dropout = true\n)\n```\n:::\n\n\nThe `model_params` can be supplied to the familiar API call:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nM = fit_model(train_data, :MLP; model_params...)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nFluxModel(Chain(Dense(784 => 32, relu), Dropout(0.25, active=false), Dense(32 => 10)), :classification_multi)\n```\n:::\n:::\n\n\nThe model performance on our test set can be evaluated as follows:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nmodel_evaluation(M, test_data)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n1-element Vector{Float64}:\n 0.9185\n```\n:::\n:::\n\n\nFinally, let's restore the default training parameters:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nCounterfactualExplanations.reset!(flux_training_params)\n```\n:::\n\n\n## Fitting and tuning MLJ models\n\nAmong models from the MLJ library, two models are integrated as part of the core functionality of the package:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nmlj_models_catalogue\n```\n:::\n\n\nThese models are compatible with the Feature Tweak generator. Support for other generators has not been implemented, as both decision trees and random forests are non-differentiable tree-based models and thus, gradient-based generators don't apply for them.\n\nTuning MLJ models is very simple. As the first step, let's reload the dataset:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nn = 500\ndata = TaijaData.load_moons(n)\ncounterfactual_data = DataPreprocessing.CounterfactualData(data...)\n```\n:::\n\n\nUsing the usual procedure for fitting models, we can call the following method:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\ntree = CounterfactualExplanations.Models.fit_model(counterfactual_data, :DecisionTree)\n```\n:::\n\n\nHowever, it's also possible to tune the DecisionTreeClassifier's parameters. This can be done using the keyword arguments when calling `fit_model()` as follows:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\ntree = CounterfactualExplanations.Models.fit_model(counterfactual_data, :DecisionTree; max_depth=2, min_samples_leaf=3)\n```\n:::\n\n\nFor all supported MLJ models, every tunable parameter they have is supported as a keyword argument. The tunable parameters for the `DecisionTreeModel` and the `RandomForestModel` can be found from the [documentation of the `DecisionTree.jl` package](https://docs.juliahub.com/DecisionTree/pEDeB/0.10.11/) under the Decision Tree Classifier and Random Forest Classifier sections.\n\n## Package extension models\n\nThe package also includes two models which don't form a part of the core functionality of the package, but which can be accessed as package extensions. These are the `EvoTreeModel` from the MLJ library and the `LaplaceReduxModel` from `LaplaceRedux.jl`.\n\nTo trigger the package extensions, the weak dependency first has to be loaded with the `using` keyword:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nusing EvoTrees\n```\n:::\n\n\nOnce this is done, the extension models can be used like any other model:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nM = fit_model(counterfactual_data, :EvoTree; model_params...)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nEvoTreesExt.EvoTreeModel(machine(EvoTreeClassifier{EvoTrees.MLogLoss}\n - nrounds: 100\n - L2: 0.0\n - lambda: 0.0\n - gamma: 0.0\n - eta: 0.1\n - max_depth: 6\n - min_weight: 1.0\n - rowsample: 1.0\n - colsample: 1.0\n - nbins: 64\n - alpha: 0.5\n - tree_type: binary\n - rng: MersenneTwister(123, (0, 9018, 8016, 884))\n, â¦), :classification_multi)\n```\n:::\n:::\n\n\nThe tunable parameters for the `EvoTreeModel` can be found from the [documentation of the `EvoTrees.jl` package](https://evovest.github.io/EvoTrees.jl/stable/) under the EvoTreeClassifier section.\n\nPlease note that support for counterfactual generation with both `LaplaceReduxModel` and `EvoTreeModel` is not yet fully implemented.\n\n## References\n\n",
    "supporting": [
      "model_catalogue_files"
    ],
    "filters": []
  }
}
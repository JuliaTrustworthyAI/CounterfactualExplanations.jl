{
  "hash": "246d25d48fdaa71f4807073bfc8a88ae",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute: \n  output: true\n---\n\n```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n``# [Evaluation](@id evaluation)``{=commonmark}\n\nNow that we know how to generate counterfactual explanations in Julia, you may have a few follow-up questions: How do I know if the counterfactual search has been successful? How good is my counterfactual explanation? What does 'good' even mean in this context? In this tutorial, we will see how counterfactual explanations can be evaluated with respect to their performance.\n\n## Default Measures\n\nNumerous evaluation measures for counterfactual explanations have been proposed. In what follows, we will cover some of the most important measures.\n\n### Single Measure, Single Counterfactual\n\nOne of the most important measures is [`validity`](@ref), which simply determines whether or not a counterfactual explanation $x^{\\prime}$ is valid in the sense that it yields the target prediction: $M(x^{\\prime})=t$. We can evaluate the validity of a single counterfactual explanation `ce` using the [`Evaluation.evaluate`](@ref) function as follows:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Evaluation: evaluate, validity\nevaluate(ce; measure=validity)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1-element Vector{Vector{Float64}}:\n [1.0]\n```\n:::\n:::\n\n\nFor a single counterfactual explanation, this evaluation measure can only take two values: it is either equal to `1`, if the explanation is valid or `0` otherwise. Another important measure is [`distance`](@ref), which relates to the distance between the factual $x$ and the counterfactual $x^{\\prime}$. In the context of Algorithmic Recourse, higher distances are typically associated with higher costs to individuals seeking recourse. \n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Objectives: distance\nevaluate(ce; measure=distance)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1-element Vector{Vector{Float32}}:\n [3.2160978]\n```\n:::\n:::\n\n\nBy default, `distance` computes the L2 (Euclidean) distance. \n\n### Multiple Measures, Single Counterfactual\n\nYou might be interested in computing not just the L2 distance, but various LP norms. This can be done by supplying a vector of functions to the `measure` key argument. For convenience, all default distance measures have already been collected in a vector:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Evaluation: distance_measures\ndistance_measures\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n4-element Vector{Function}:\n distance_l0 (generic function with 1 method)\n distance_l1 (generic function with 1 method)\n distance_l2 (generic function with 1 method)\n distance_linf (generic function with 1 method)\n```\n:::\n:::\n\n\nWe can use this vector of evaluation measures as follows:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nevaluate(ce; measure=distance_measures)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n4-element Vector{Vector{Float32}}:\n [2.0]\n [3.2160978]\n [2.782144]\n [2.7413368]\n```\n:::\n:::\n\n\nIf no `measure` is specified, the `evaluate` method will return all default measures,\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nevaluate(ce)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n3-element Vector{Vector}:\n [1.0]\n Float32[3.2160978]\n [0.0]\n```\n:::\n:::\n\n\nwhich include:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nCounterfactualExplanations.Evaluation.default_measures\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n3-element Vector{Function}:\n validity (generic function with 1 method)\n distance (generic function with 1 method)\n redundancy (generic function with 1 method)\n```\n:::\n:::\n\n\n### Multiple Measures and Counterfactuals\n\nWe can also evaluate multiple counterfactual explanations at once:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ngenerator = DiCEGenerator()\nces = generate_counterfactual(x, target, counterfactual_data, M, generator; num_counterfactuals=5)\nevaluate(ces)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n3-element Vector{Vector}:\n [1.0]\n Float32[3.2186122]\n [[0.0, 0.0, 0.0, 0.0, 0.0]]\n```\n:::\n:::\n\n\nBy default, each evaluation measure is aggregated across all counterfactual explanations. To return individual measures for each counterfactual explanation you can specify `report_each=true`\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nevaluate(ces; report_each=true)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3-element Vector{Vector}:\n BitVector[[1, 1, 1, 1, 1]]\n Vector{Float32}[[3.2230358, 3.1825113, 3.2527277, 3.2267833, 3.208004]]\n [[0.0, 0.0, 0.0, 0.0, 0.0]]\n```\n:::\n:::\n\n\n## Custom Measures\n\nA `measure` is just a method that takes a `CounterfactualExplanation` as its only positional argument and `agg::Function` as a key argument specifying how measures should be aggregated across counterfactuals. Defining custom measures is therefore straightforward. For example, we could define a measure to compute the inverse target probability as follows:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nmy_measure(ce::CounterfactualExplanation; agg=mean) = agg(1 .- CounterfactualExplanations.target_probs(ce))\nevaluate(ce; measure=my_measure)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n1-element Vector{Vector{Float32}}:\n [0.40882105]\n```\n:::\n:::\n\n\n## Tidy Output\n\nBy default, `evaluate` returns vectors of evaluation measures. The optional key argument `output_format::Symbol` can be used to post-process the output in two ways: firstly, to return the output as a dictionary, specify `output_format=:Dict`:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nevaluate(ces; output_format=:Dict, report_each=true)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nDict{Symbol, Vector} with 3 entries:\n  :validity   => BitVector[[1, 1, 1, 1, 1]]\n  :redundancy => [[0.0, 0.0, 0.0, 0.0, 0.0]]\n  :distance   => Vector{Float32}[[3.22304, 3.18251, 3.25273, 3.22678, 3.208]]\n```\n:::\n:::\n\n\nSecondly, to return the output as a data frame, specify `output_format=:DataFrame`.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nevaluate(ces; output_format=:DataFrame, report_each=true)\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=13}\n\\begin{tabular}{r|cccc}\n\t& sample & num\\_counterfactual & variable & value\\\\\n\t\\hline\n\t& Base.UUID & Int64 & String & Float64\\\\\n\t\\hline\n\t1 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 1 & distance & 3.22304 \\\\\n\t2 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 2 & distance & 3.18251 \\\\\n\t3 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 3 & distance & 3.25273 \\\\\n\t4 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 4 & distance & 3.22678 \\\\\n\t5 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 5 & distance & 3.208 \\\\\n\t6 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 1 & redundancy & 0.0 \\\\\n\t7 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 2 & redundancy & 0.0 \\\\\n\t8 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 3 & redundancy & 0.0 \\\\\n\t9 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 4 & redundancy & 0.0 \\\\\n\t10 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 5 & redundancy & 0.0 \\\\\n\t11 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 1 & validity & 1.0 \\\\\n\t12 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 2 & validity & 1.0 \\\\\n\t13 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 3 & validity & 1.0 \\\\\n\t14 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 4 & validity & 1.0 \\\\\n\t15 & a9dbc686-2355-11ef-04be-eb1f6e792278 & 5 & validity & 1.0 \\\\\n\\end{tabular}\n\n:::\n:::\n\n\nBy default, data frames are pivoted to long format using individual counterfactuals as the `id` column. This behaviour can be suppressed by specifying `pivot_longer=false`.\n\n## Multiple Counterfactual Explanations\n\nIt may be necessary to generate counterfactual explanations for multiple individuals. \n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=14}\nBelow, for example, we first select multiple samples (5) from the non-target class and then generate counterfactual explanations for all of them. \n\n:::\n:::\n\n\nThis can be done using broadcasting:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\n# Factual and target:\nids = rand(findall(predict_label(M, counterfactual_data) .== factual), n_individuals)\nxs = select_factual(counterfactual_data, ids)\nces = generate_counterfactual(xs, target, counterfactual_data, M, generator; num_counterfactuals=5)\nevaluation = evaluate.(ces)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5-element Vector{Vector{Vector}}:\n [[0.8], Float32[3.2487042], [[0.0, 0.0, 0.0, 0.0, 0.0]]]\n [[0.8], Float32[4.185718], [[0.0, 0.0, 0.0, 0.0, 0.0]]]\n [[1.0], Float32[4.0083566], [[0.0, 0.0, 0.0, 0.0, 0.0]]]\n [[1.0], Float32[2.9578466], [[0.0, 0.0, 0.0, 0.0, 0.0]]]\n [[0.8], Float32[2.6089585], [[0.0, 0.0, 0.0, 0.0, 0.0]]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-stdout}\n```\nVector{Vector}[[[0.8], Float32[3.2487042], [[0.0, 0.0, 0.0, 0.0, 0.0]]], [[0.8], Float32[4.185718], [[0.0, 0.0, 0.0, 0.0, 0.0]]], [[1.0], Float32[4.0083566], [[0.0, 0.0, 0.0, 0.0, 0.0]]], [[1.0], Float32[2.9578466], [[0.0, 0.0, 0.0, 0.0, 0.0]]], [[0.8], Float32[2.6089585], [[0.0, 0.0, 0.0, 0.0, 0.0]]]]\n```\n:::\n:::\n\n\nThis leads us to our next topic: Performance Benchmarks.\n\n",
    "supporting": [
      "evaluation_files"
    ],
    "filters": []
  }
}
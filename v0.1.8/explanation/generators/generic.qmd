```@meta
CurrentModule = CounterfactualExplanations 
```

```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```

# `GenericGenerator`

We use the term **generic** to relate to the counterfactual generator proposed by @wachter2017counterfactual. 

## Description

As the term indicates, this approach is simple: it forms the baseline approach for gradient-based counterfactual generators. @wachter2017counterfactual were among the first to realise that 

> [...] explanations can, in principle, be offered without opening the “black box.”
>
> --- @wachter2017counterfactual

Gradient descent is performed directly in the feature space. Concerning the cost heuristic, the authors choose to penalize the distance of counterfactuals from the factual value. This is based on the intuitive notion that larger feature perturbations require greater effort.

## Usage

The approach can be used in our package as follows:

```{julia}
#| output: true
generator = GenericGenerator()
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
plot(ce)
```



## References
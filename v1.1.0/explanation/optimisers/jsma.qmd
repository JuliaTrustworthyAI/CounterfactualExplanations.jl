```@meta
CurrentModule = CounterfactualExplanations 
```

```{julia}
#| echo: false
include("$(pwd())/docs/setup_docs.jl")
eval(setup_docs)
```

# Jacobian-based Saliency Map Attack

To search counterfactuals, @schut2021generating propose to use a Jacobian-Based Saliency Map Attack (JSMA) inspired by the literature on adversarial attacks. It works by moving in the direction of the most salient feature at a fixed step size in each iteration. @schut2021generating use this optimisation rule in the context of Bayesian classifiers and demonstrate good results in terms of plausibility --- how realistic counterfactuals are --- and redundancy --- how sparse the proposed feature changes are.

## `JSMADescent`

To implement this approach in a reusable manner, we have added JSMA as a `Flux` optimiser. In particular, we have added a class `JSMADescent<:Flux.Optimise.AbstractOptimiser`, for which we have overloaded the `Flux.Optimise.apply!` method. This makes it possible to reuse `JSMADescent` as an optimiser in composable generators.

```{julia}
#| echo: false
generator = GenericGenerator()
generator.opt = Descent(0.01)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
p1 = plot(ce, title="Descent")
```

The optimiser can be used with with any generator as follows:

```{julia}
using CounterfactualExplanations.Generators: JSMADescent
generator = GenericGenerator() |>
    gen -> @with_optimiser(gen,JSMADescent(;Î·=0.1))
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
#| echo: false

p2 = plot(ce, title="JSMA")
```

The figure below compares the resulting counterfactual search outcome to the corresponding outcome with generic `Descent`.

```{julia}
#| output: true

plot(p1,p2,size=(1000,400))
```


# make julia 

```{julia}
    using Pkg
    Pkg.activate("dev/artifacts/test")
```
```{julia}
    using CounterfactualExplanations
    using LinearAlgebra
    using Random, Distributions

    function create_identity_matrix(n; variance = .01)
        mat = Matrix{Float64}(I, n, n)
        for i in 1:n
            mat[i, i] = mat[i, i] * rand(Normal(0, variance))
        end
        return mat
    end
    print(create_identity_matrix(3; variance=0.6))
```

```{julia}
    using Flux
	using Flux.Losses
```
```{julia}
    # Counteractual data and model:
    counterfactual_data = load_linearly_separable()
    M = fit_model(counterfactual_data, :Linear)
    target = 2
    factual = 1
    chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
    x = select_factual(counterfactual_data, chosen)

    # Search:
    generator = GenericGenerator()
    ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
    println(Flux.Losses.logitcrossentropy(
        logits(ce.M, CounterfactualExplanations.decode_state(ce)),
        ce.target_encoded;
    ))
    println(logits(ce.M, CounterfactualExplanations.decode_state(ce)))
```



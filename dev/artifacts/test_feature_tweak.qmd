```{julia}
using Revise
include("$(pwd())/dev/artifacts/setup.jl")
eval(setup)
```

```{julia}
generator_catalogue
```

```{julia}
n = 500
counterfactual_data = load_linearly_separable(n)
X = counterfactual_data.X
y = counterfactual_data.y
plt = plot()
scatter!(counterfactual_data)
```

```{julia}
X = float32.(X)
y = string.(y[2,:])
```

```{julia}
using MLJ
model = @load DecisionTreeClassifier pkg=DecisionTree
M = model(max_depth=2)
df = DataFrame(X', :auto)
mach = machine(M, df, categorical(y)) |> fit!
```

```{julia}
DecisionTree.predict_proba(model, float32.([1.0,1.0]))
DecisionTree.predict(model, float32.([-1.0,0.5]))
```

```{julia}
DecisionTree.predict(model, float32.([2, 0]))
```

```{julia}
x = float32.([2, 0])
target = 1
M = Models.TreeModel(mach)
x = float32.([1, -0.5])
generator = FeatureTweakGenerator(Ïµ=0.1)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
scatter!(plt, [x[1]], [x[2]], color="red", markersize=10, label="x_old")
scatter!(plt, [ce.x[1]], [ce.x[2]], color="dark blue", markersize=10, label="x_new")

hline!(plt, [-0.007127], linestyle=:dash, linecolor=:black, label=nothing)
vline!(plt, [-0.5219], linestyle=:dash, linecolor=:black, label=nothing)
vline!(plt, [1.475], linestyle=:dash, linecolor=:black, label=nothing)
```
```{julia}
using Revise
include("$(pwd())/dev/artifacts/setup.jl")
eval(setup)
```

```{julia}
generator_catalogue
```

```{julia}
n = 500
counterfactual_data = load_moons(n)
X = counterfactual_data.X
y = counterfactual_data.y
plt = plot()
scatter!(counterfactual_data)
```

```{julia}
X = float32.(X)
y = string.(y[2,:])
```

```{julia}
using DecisionTree
model = DecisionTreeClassifier(max_depth=2)
DecisionTree.fit!(model, X', y)
DecisionTree.print_tree(model)
```

```{julia}
DecisionTree.predict(model, float32.([2, 0.25]))
```

```{julia}
M = model_catalogue[:DecisionTree](model, :classification_binary)
x = float32.([2, 0.25])
target = 0
generator = FeatureTweakGenerator(Ïµ=0.1)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
DecisionTree.predict(model, float32.([1.375425, 0.0928731]))
```

```{julia}
scatter!(plt, [x[1]], [x[2]], color="red", markersize=10, label="x_old")
scatter!(plt, [ce.x[1]], [ce.x[2]], color="dark blue", markersize=10, label="x_new")

hline!(plt, [-0.007127], linestyle=:dash, linecolor=:black, label=nothing)
vline!(plt, [-0.5219], linestyle=:dash, linecolor=:black, label=nothing)
vline!(plt, [1.475], linestyle=:dash, linecolor=:black, label=nothing)
```

```{julia}
using MLJ
using EvoTrees
model = @load EvoTreeClassifier pkg=DecisionTree
M = model(max_depth=3)
df = DataFrame(X'[1:300, :], :auto)
mach = machine(M, df, categorical(y)[1:300]) |> fit!
```
```{julia}
using Revise
include("$(pwd())/dev/artifacts/setup.jl")
eval(setup)
```

```{julia}
generator_catalogue
```

```{julia}
n = 500
counterfactual_data = load_moons(n)
X = counterfactual_data.X
y = counterfactual_data.y
plt = plot()
scatter!(counterfactual_data)
```

```{julia}
X = float32.(X)
y = string.(y[2,:])
```

```{julia}
using DecisionTree
model = DecisionTreeClassifier(max_depth=2)
DecisionTree.fit!(model, X', y)
DecisionTree.print_tree(model)
```

```{julia}
DecisionTree.predict_proba(model, float32.([1.0,1.0]))
DecisionTree.predict(model, float32.([-1.0,0.5]))
```

```{julia}
DecisionTree.predict(model, float32.([2, 0]))
```

```{julia}
M = model_catalogue[:DecisionTree](model, :classification_binary)
x = float32.([2, 0])
target = 0
generator = FeatureTweakGenerator(Ïµ=0.1)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
DecisionTree.predict_proba(model, float32.([-0.95992476; 0.38319513;;]))
```
## Preprocessing Real-World Data

```{julia}
#| echo: false

include("$(pwd())/dev/artifacts/setup.jl")
eval(setup)
www_path = www_dir("tabular")
data_path = data_dir("tabular")
artifact_name = "data-tabular"
```

### California Housing Data

Fetching the data using Python's `sklearn` (run this in the Python REPL):

```{.python}
from sklearn.datasets import fetch_california_housing
df, y = fetch_california_housing(return_X_y=True, as_frame=True)
df["target"] = y.values
data_path = "dev/artifacts/upload/data/tabular"
import os
if not os.path.isdir(os.path.join(data_path,"raw")):
    os.makedirs(os.path.join(data_path,"raw"))
df.to_csv(os.path.join(data_path,"raw/cal_housing.csv"), index=False)
```

Loading the data into Julia session. 

```{julia}
df = CSV.read(joinpath(data_path, "raw/cal_housing.csv"), DataFrame)
# target:
y = df.target
y = Float64.(y .>= median(y)); # binary target (positive outcome)
# Data:
df.target = y
```

Random undersampling to balance the data:

```{julia}
df_balanced = getobs(undersample(df, df.target; shuffle=true))[1]
CSV.write(joinpath(data_path, "cal_housing.csv"), df_balanced)
```

### Give Me Some Credit

Loading and basic preprocessing:

```{julia}
df = CSV.read(joinpath(data_path, "raw/cs-training.csv"), DataFrame)
select!(df, Not([:Column1]))
rename!(df, :SeriousDlqin2yrs => :target)
mapcols!(x -> [ifelse(x_=="NA", missing, x_) for x_ in x], df)
dropmissing!(df)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
df.target .= map(y -> y == 0 ? 1 : 0, df.target)        # postive outcome = no delinquency
```

Balancing:

```{julia}
df_balanced = getobs(undersample(df, df.target;shuffle=true))[1]
CSV.write(joinpath(data_path, "gmsc.csv"), df_balanced)
```

### UCI Credit Card Default

Loading and basic preprocessing:

```{julia}
df = CSV.read(joinpath(data_path, "raw/UCI_Credit_Card.csv"), DataFrame)
select!(df, Not([:ID]))
rename!(df, "default.payment.next.month" => :target)
dropmissing!(df)
df.SEX = categorical(df.SEX)
df.EDUCATION = categorical(df.EDUCATION)
df.MARRIAGE = categorical(df.MARRIAGE)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
df.target .= map(y -> y == 0 ? 1 : 0, df.target)        # postive outcome = no default
```

Balancing:

```{julia}
df_balanced = getobs(undersample(df, df.target;shuffle=true))[1]
CSV.write(joinpath(data_path, "credit_default.csv"), df_balanced)
```

```{julia}
generate_artifacts(data_path; artifact_name=artifact_name)
```

### Statlog German Credit

Fetching the data using Python (run this in the Python REPL):

```{.python}
import os
import numpy as np
import pandas as pd
import io
import re

from urllib.request import urlopen

# Fetch dataset from the internet
url = "http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric#sthash.5uGaT1gR.dpuf"
raw_data = urlopen(url).read()

# Decode bytes to string
data_str = raw_data.decode('utf-8')

# Swap multiple spaces between values to one space only
data_str_fixed = re.sub(' +', ' ', data_str)

# Remove leading and trailing spaces from each line
data_str_fixed = '\n'.join(line.strip() for line in data_str_fixed.split('\n'))

# Translate the dataset into a dataframe
input_stream = io.StringIO(data_str_fixed)
df = pd.read_csv(input_stream, delimiter=' ', header=None)

data_path = "dev/artifacts/upload/data/tabular"

if not os.path.isdir(os.path.join(data_path,"raw")):
    os.makedirs(os.path.join(data_path,"raw"))

df.to_csv(os.path.join(data_path,"raw/german_credit.csv"), index=False)
```

Loading the data into Julia session and saving it.

```{julia}
df = CSV.read(joinpath(data_path, "raw/german_credit.csv"), DataFrame)
CSV.write(joinpath(data_path, "german_credit.csv"), df)
```

Create artifacts:

```{julia}
generate_artifacts(data_path; artifact_name=artifact_name)
```

### UCI Adult

```{python}
import os
import numpy as np
import pandas as pd
import io
import re

from urllib.request import urlopen

# Fetch dataset from the internet
url = "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
raw_data = urlopen(url).read()

# Decode bytes to string
data_str = raw_data.decode('utf-8')

# Swap multiple spaces between values to one space only
data_str_fixed = re.sub(' +', ' ', data_str)

# Remove leading and trailing spaces from each line
data_str_fixed = '\n'.join(line.strip() for line in data_str_fixed.split('\n'))

features = ["Age", "Workclass", "fnlwgt", "Education", "Education-Num", "Marital Status",
        "Occupation", "Relationship", "Race", "Sex", "Capital Gain", "Capital Loss",
        "Hours per week", "Country", "target"]

# Translate the dataset into a dataframe
input_stream = io.StringIO(data_str_fixed)
df = pd.read_csv(input_stream, names=features, delimiter=', ', header=None)

# Transform string features into numerals
labels = df['target']
labels = labels.replace('<=50K', 0).replace('>50K', 1)
labels = labels.replace('<=50K.', 0).replace('>50K.', 1)

df['target'] = labels

workclass = ["Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", "Local-gov", "State-gov", "Without-pay", "Never-worked", "?"]

for w in workclass:
    df["Workclass"] = df["Workclass"].replace(w, workclass.index(w))

education = ["Bachelors", "Some-college", "11th", "HS-grad", "Prof-school", "Assoc-acdm", "Assoc-voc", "9th", "7th-8th", "12th", "Masters", "1st-4th", "10th", "Doctorate", "5th-6th", "Preschool", "?"]

for w in education:
    df["Education"] = df["Education"].replace(w, education.index(w))

marital = ['Married-civ-spouse', 'Divorced', 'Never-married', 'Separated', 'Widowed', 'Married-spouse-absent', 'Married-AF-spouse', '?']

for w in marital:
    df["Marital Status"] = df["Marital Status"].replace(w, marital.index(w))

data_path = "upload/data/tabular"

occupation = ['Tech-support', 'Craft-repair', 'Other-service', 'Sales', 'Exec-managerial', 'Prof-specialty', 'Handlers-cleaners', 'Machine-op-inspct', 'Adm-clerical', 'Farming-fishing', 'Transport-moving', 'Priv-house-serv', 'Protective-serv', 'Armed-Forces', '?']

for w in occupation:
    df["Occupation"] = df["Occupation"].replace(w, occupation.index(w))

relationship = ["Wife","Own-child","Husband","Not-in-family","Other-relative","Unmarried", "?"]

for w in relationship:
    df["Relationship"] = df["Relationship"].replace(w, relationship.index(w))

race = ["White","Asian-Pac-Islander","Amer-Indian-Eskimo","Other","Black", "?"]

for w in race:
    df["Race"] = df["Race"].replace(w, race.index(w))

sex = ["Female", "Male"]

for w in sex:
    df["Sex"] = df["Sex"].replace(w, sex.index(w))

country = ["United-States","Cambodia","England","Puerto-Rico","Canada","Germany","Outlying-US(Guam-USVI-etc)","India","Japan","Greece","South","China","Cuba","Iran","Honduras","Philippines","Italy","Poland","Jamaica","Vietnam","Mexico","Portugal","Ireland","France","Dominican-Republic","Laos","Ecuador","Taiwan","Haiti","Columbia","Hungary","Guatemala","Nicaragua","Scotland","Thailand","Yugoslavia","El-Salvador","Trinadad&Tobago","Peru","Hong","Holand-Netherlands", "?"]

for w in country:
    df["Country"] = df["Country"].replace(w, country.index(w))

if not os.path.isdir(os.path.join(data_path,"raw")):
    os.makedirs(os.path.join(data_path,"raw"))

df.to_csv(os.path.join(data_path,"raw/adult.csv"), index=False)
```

```{julia}
df = CSV.read(joinpath(data_path, "raw/adult.csv"), DataFrame)
println(df[1:5, :])
CSV.write(joinpath(data_path, "adult.csv"), df)
```

Create artifacts:

```{julia}
generate_artifacts(data_path; artifact_name=artifact_name)
```
var documenterSearchIndex = {"docs":
[{"location":"tutorials/quick/","page":"Quick start","title":"Quick start","text":"CurrentModule = AlgorithmicRecourse ","category":"page"},{"location":"tutorials/quick/#Quick-start","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"tutorials/quick/","page":"Quick start","title":"Quick start","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = AlgorithmicRecourse ","category":"page"},{"location":"reference/#AlgorithmicRecourse","page":"Reference","title":"AlgorithmicRecourse","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [AlgorithmicRecourse, AlgorithmicRecourse.Generators]\nPrivate = false","category":"page"},{"location":"reference/#AlgorithmicRecourse.generate_recourse-Tuple{Generator, AbstractArray, AlgorithmicRecourse.Models.FittedModel, Float64}","page":"Reference","title":"AlgorithmicRecourse.generate_recourse","text":"generate_recourse(generator::Generator, x̅::AbstractArray, 𝓜::Models.FittedModel, target::Float64; T=1000, 𝓘=[])\n\nTakes a recourse generator, the factual sample x̅, the fitted model 𝓜 and the target label. Returns the generated recourse (an object of type Recourse).\n\nExamples\n\nw = [1.0,-2.0] # true coefficients\nb = [0]\nx̅ = reshape([-1,0.5],1,2)\ntarget = 1.0\n𝓜 = AlgorithmicRecourse.Models.LogisticModel(w, b);\ngenerator = GenericGenerator(0.1,0.1,1e-5,:logitbinarycrossentropy)\nrecourse = generate_recourse(generator, x̅, 𝓜, target); # generate recourse\n\nSee also GenericGenerator(λ::Float64, ϵ::Float64, τ::Float64)\n\n\n\n\n\n","category":"method"},{"location":"reference/#AlgorithmicRecourse.Generators.Generator","page":"Reference","title":"AlgorithmicRecourse.Generators.Generator","text":"Generator\n\nAn abstract type that serves as the base type for recourse generators. \n\n\n\n\n\n","category":"type"},{"location":"reference/#AlgorithmicRecourse.Generators.GenericGenerator","page":"Reference","title":"AlgorithmicRecourse.Generators.GenericGenerator","text":"GenericGenerator(λ::Float64, ϵ::Float64, τ::Float64, loss::Symbol)\n\nA constructor for a generic recourse generator.  It takes values for the complexity penalty λ, the learning rate ϵ, the tolerance for convergence τ and the type of loss function to be used in the recourse objective. \n\nExamples\n\ngenerator = GenericGenerator(0.1,0.1,1e-5,:logitbinarycrossentropy)\n\nSee also generate_recourse\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AlgorithmicRecourse","category":"page"},{"location":"#AlgorithmicRecourse","page":"Home","title":"AlgorithmicRecourse","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AlgorithmicRecourse.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for counterfactual explanations (CE) and algorithmic recourse (AR) in Julia. The former (CE) is a common approach towards explaining machine learning models. The latter (AR) uses counterfactual explanations to systematically provide recourse to individuals faced with an undesirable algorithmic outcome. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is in its early stages of development and not yet registered. In the meantime it can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/pat-alt/AlgorithmicRecourse.jl\")","category":"page"}]
}

## Gravitational Generator

```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```

```{julia}
#| eval: true
N = 1000
X, ys = make_blobs(N, 2; centers=2, as_table=false, center_box=(-5 => 5), cluster_std=0.5)
ys .= ys.==2
X = X'
xs = Flux.unstack(X,2)
data = zip(xs,ys)
counterfactual_data = CounterfactualData(X,ys')
```

```{julia}
#| eval: true
nn = Chain(Dense(2,1))
opt = Adam()
epochs = 100
loss(x, y) = Flux.Losses.logitbinarycrossentropy(nn(x), y)
avg_loss(data) = mean(map(d -> loss(d[1],d[2]), data))
show_every = epochs/10
for epoch = 1:epochs
  for d in data
    gs = gradient(Flux.params(nn)) do
      l = loss(d...)
    end
    update!(opt, Flux.params(nn), gs)
  end
  if epoch % show_every == 0
    println("Epoch " * string(epoch))
    @show avg_loss(data)
  end
end
```

```{julia}
#| eval: true
M = FluxModel(nn)
```

```{julia}
#| eval: true
x = select_factual(counterfactual_data, rand(1:size(X)[2])) 
y = round(probs(M, x)[1])
target = ifelse(y==1.0,0.0,1.0) # opposite label as target
T = 100
```

```{julia}
#| eval: true
Λ₂ = [0.01, 0.1, 1]
counterfactuals_strict = []
generators = []
for λ₂ ∈ Λ₂  
    λ = [0.1, λ₂]
    generator = GravitationalGenerator(λ=λ)
    generators = vcat(generators..., generator)
    counterfactuals_strict = vcat(
      counterfactuals_strict...,
      generate_counterfactual(x, target, counterfactual_data, M, generator; T=T)
    )
end
```

```{julia}
#| eval: true
#| fig-cap: |
#|    Generating counterfactuals through `GravitationalGenerator`. The magnitude of attraction ($\lambda_2) increases from left to right.
#| label: fig-grav

T_ = 500
plts = []
for i ∈ 1:length(Λ₂)
    λ₂ = Λ₂[i]
    counterfactual = counterfactuals_strict[i]  
    plt = plot(counterfactual, plot_up_to=minimum([T,T_]), title="λ₂=$(λ₂)")
    x1,x2 = generators[i].centroid[1], generators[i].centroid[2]
    scatter!(plt, [x1], [x2], colour=:purple, label="attractor")
    plts = vcat(plts..., plt)
end
plt = plot(plts..., size=(1200,300), layout=(1,3))
```